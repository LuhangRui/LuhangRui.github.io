{"pages":[{"title":"about","text":"关于我 现就业于北京。 一个从网络营销专业转行来写PHP的逗比。 日常工作就是制造BUG。 近期动向 努力的干VUE来着，希望自己能成为一个伪全栈的大佬。 公司最近的后端技术栈可能要改成node了，有学习计划。 联系方式 QQ ：假装这里有联系方式。","link":"/about/index.html"}],"posts":[{"title":"50行代码写的一个插件，破解一个H5小游戏","text":"小游戏链接：测测你的眼睛对色差的辨识度http://www.webhek.com/post/color-test.html?from=timeline 废话不多说，先放代码：12345678910111213141516171819202122232425262728293031323334353637383940window.onload = function () { console.log(\"点击开始测试-------\"); //点击开始按钮 var play = document.getElementsByClassName('play-btn'); play[0].click(); //获取画布盒子 // sleep(1); var box = document.getElementById('box'); var num = box.children.length; console.log('共有'+ num + '个字元素'); //把第一个元素定义为基础色 var color = []; var basecolor = box.children[0].style.backgroundColor; console.log(basecolor); //循环 function clickButton() { console.log('下一关'); box = document.getElementById('box'); num = box.children.length; color = []; basecolor = box.children[0].style.backgroundColor; // console.log('进入下一关'); for (var i = 1; i &lt; num ; i++) { color[i] = box.children[i].style.backgroundColor; } for (var i = num-1; i &gt;0 ; i--) { if (color[i]!=basecolor &amp;&amp; color[i-1] ==basecolor) { box.children[i].click(); console.log(\"点击第\"+(i+1)+'个元素'); } else if (color[i]!=basecolor &amp;&amp; color[i-1] !=basecolor) { box.children[0].click(); console.log(\"点击第\"+1+'个元素'); } } } setInterval(clickButton,300); } 游戏界面： 思路都在代码里了，就是取到全部的色块元素，拿CSS对比，找到不一样那个，JS点击，进入下一关。当然，代码写的很粗糙，还有改进的空间。轻喷。 说一下流程： 首先呢，我们要把JS代码注入到游戏页面中，这个我是通过把代码打包成浏览器插件实现的。我做的谷歌浏览器的插件，当然你也可以做360的，火狐的，等等。 具体不同浏览器的插件的方法，你可以通过百度，在CSDN上找到对应的文章。 如果有人想试一下的话，可以下载这个谷歌浏览器的插件： 链接: https://pan.baidu.com/s/1yASkGKcrz1pPt0vY6gxqeg 提取码: jvcu 插件安装方法： 解压文件到一个好找的文件夹，然后 谷歌浏览器-》设置-》更多工具-》拓展程序-》开发者模式打开-》加载已解压的插件。 插件使用： 打开游戏界面，，插件就会自动运行，如果出问题的话，就多刷新几次。 放在最后： 体验几次之后就把插件移除吧，代码写的不完善，插件会在每个页面都运行，而JS里有一个定时器，因而可能会拖累浏览器的速度。","link":"/posts/40280.html"},{"title":"Mysql不同版本cast/truncate函数对浮点型的处理","text":"Mysql不同版本cast/truncate函数对浮点型的处理我们不妨先来看一个现象 1select cast(1/5 as decimal(4,2)); 我们先盲猜一下这条SQL的运行结果，如果按照我们的一贯经验，那应该是0.20，毕竟我们as decimal(4,2)是保留两位小数的。但是实际上并不一定是。在不同的mysql版本下执行了这条sql：1select cast(1/5 as decimal(4,2)) as res,version() as v; 得到的结果如下： 5.6.45、5.6.36、5.6.39三个小版本中的表现，不论是cast还是truncate函数，对能整除的操作的保留两位小数得到的结果都是无法保留末尾是0的小数的，末尾的0会自动被舍弃。 5.7.22、8.0.15这两个版本表现完全是另一种结果，执行以下SQL： 1select cast(1/5 as decimal(4,2)) as castRes,truncate(1/5,2) as truncateRes; 得到的结果都是0.20。 某次开发过程中遇到了这个Bug，不得其解，记录一下，以示后来人。不过我们也由此得出一个准则，数据格式的format处理还是尽可能的交给程序去处理，而不是mysql。","link":"/posts/57345.html"},{"title":"CI框架对HTML输入的处理/CI框架引用ueditor时对提交内容的默认处理","text":"项目里近期用到了富文本编辑器，可是写入数据的时候总是写入， 1&lt;p xss=\"removed\"&gt;内容&lt;/p&gt; 所有的样式都会被改写成这样，xss=&quot;removed&quot;，造成前端展示的时候没有任何样式，排查的过程中一度以为是百度的富文本编辑器对输入的数据进行了处理，不过在进行排查的过程中，我用官方的demo提交到一个php文件做测试的时候发现，接受到的数据并没有问题。 所以想到框架中接受数据用的是CI框架封装的1$this-&gt;input-&gt;post(null,true); 并不是原生的 $_POST 有可能是这里有问题，很容易就想到，是框架本身都输入的内容做了防XSS攻击的处理。 以上。","link":"/posts/23321.html"},{"title":"Sublime text3中文版 无法安装插件There are no packages available for installation问题的解决","text":"说起来差点没被气死，我当时的情况已经是要疯了，连他们的域名都ping不通，我还想着，咋地，要倒闭了？ 首选项-》插件设置-》Package Control-》默认 里边的这个配置项 https://sublime.wbond.net/channel.json 这个地址我在浏览器都无法访问，ping这个域名都超时（后来被证明可能是网速的原因，有时候能访问得到有时候访问不到）。 可是我不明白的是，官方的这个配置为什么不能直接用，还需要用户自行进行配置，感觉有毒啊。 好了，不废话了，直接说解决方案： 1.下载 https://packagecontrol.io/channel_v3.json 随便放在什么目录里，php程序员的话，我觉得我们可以这么搞: 1file_put_contents('channel_v3.json',file_get_contents(\"https://packagecontrol.io/channel_v3.json\")); 在sublime里直接ctrol+b运行，直接下载了，是不是很棒？哈哈哈 2.打开这个文件，修改”schema_version”: “ 3.0.0” 为 “schema_version”:” 2.0” 3.路径：首选项-》插件设置-》Package Control-》默认 修改此配置123\"channels\": [ \"https://sublime.wbond.net/channel.json\" ], 改为：123\"channels\": [ \"D:/Program File/phpstudy/PHPTutorial/WWW/test/channel_v3.json\" ], 好了，大功告成。至于这么做的原理，参见这位老哥的文章，不过这个老哥好像发了一篇博文之后再没有更新了，本来也想直接转载的，但是怕是等不到作者回我了，还是自己写一遍吧。 文章地址在这里 参考文章","link":"/posts/30182.html"},{"title":"cmder的segmentation fault错误修复","text":"Segmentation fault 现场还原 问题出现的原因是我在 cmder的命令行里执行了cmder /register ALL命令，本意是把cmder放到右键菜单里去的但我没想到的是，各种不成功，提示cmder lanchun什么的，之后，我换在了windows自带的cmd中执行这个命令，成功了。但是令人疑惑的是cmder的bash窗口就此开始抽疯，cd 命令可以使用 ll、ls之类的命令直接抛出Segmentation fault错误。 实验过程&amp;&amp;猜想 百度搜了很久并没有找到解决方案，百度提到可能的原因： git bash 版本过旧，有概率出现这个问题，但是升级之后并没有解决这个问题 猜想可能的原因： Cmder full这个版本是有BUG的，我们看Cmder的设置的时候，可以发现他的GUI其实是ConEmu，然后又拿这个调用了git bash ，那我们直接拿ConEmu调用git bash会不会有问题呢，所以我们打开ConEmu执行命令cd git/bin &amp;&amp; bash --login -i 我们发现我们这时候进入bash 界面了，我们使用一下ll命令，哎，这次没有报错了。 我们换Cmder mini 试一下，打开bash:bash窗口，卧槽，啥玩意，居然说系统找不到制定路径，好的，我们从设置里看一下，执行bash窗口之后执行的哪个命令，可以看到是cmd /c &quot;&quot;%ConEmuDir%\\..\\git-for-windows\\bin\\bash&quot; --login -i&quot; ,我们打开安装目录，看一下，我去！ConEmuDir 的上级根本没有git-for-windows目录，好吧，你赢了，而在full版本中是有的！！！ 我后来找到我git-bash的安装目录，复制整个文件夹到cmder的Vender 目录，改名成git-for-windows,打开bash:bash窗口，哎，进来了，运行命令试试，好的，Surprise ! 这次没有报错。问题成功解决。 结论 结论就是 Cmder full 的版本在Windows10下，可能有某种未知的Bug , 我们可以通过尝试使用给 Cmder mini 添加git-bash的办法，来代替它。","link":"/posts/57887.html"},{"title":"laydate V5.0.8动态设置min值","text":"laydate通过设置min,max值来对用户输入的时间做约束 laydate v1.0版本 12345678910111213141516171819202122232425262728//日期插件 var start={ elem:\"#start\", format:\"YYYY-MM-DD hh:mm:ss\", min:\"2013-08-18 00:00:00\", max:\"2099-06-16 23:59:59\", istime:true, istoday:true, choose:function(a){ end.min=a; end.start=a } }; var end={ elem:\"#end\", format:\"YYYY-MM-DD hh:mm:ss\", min:\"2013-08-18 00:00:00\", max:\"2099-06-16 23:59:59\", istime:true, istoday:true, choose:function(a){ start.max=a } }; laydate(start); laydate(end);//只要在回调函数choose中赋值就行了 laydate v5.0版本 12345678910111213141516171819202122232425262728//日期插件 var start=laydate.render({ elem:\"#start_time\", type:\"datetime\", format:\"yyyy-MM-dd HH:mm:ss\", min:\"2013-08-18\", max:\"2099-06-16\", done:function(value,date){ end.config.min={ year: date.year, month: date.month-1, date: date.date, hours: date.hours, minutes: date.minutes, seconds: date.seconds }; } }); var end =laydate.render({ elem:\"#end_time\", type:\"datetime\", format:\"yyyy-MM-dd HH:mm:ss\", min:\"2013-08-18\", max:\"2099-06-16\", done:function(a){ // start.max=a } }); 在v5.0版本中，min值变成了一个对象，并不会重新渲染，所以直接对min设置值是没有用的，得单独对每个min的子元素赋值 特别要注意的是month要减1 虽然我也并不清楚为什么要这么做，但是It works. 我已经去layui的社区问了，希望能有人帮我解惑。","link":"/posts/55229.html"},{"title":"gitment初始化评论跳回博客首页","text":"表现 众所周知，gitment评论系统需要初始化以创建对应的issue，可是我在点击login with github的时候，总是跳向博客首页！WTF！什么鬼？这样不程序啊？ 排查 1.F12查看login回调链接，redirect_uri参数没有什么问题啊，行，我们回头查看，github的文档， github文档地址 2.文档中提到，如果地址不匹配的话，就会重定向到你在OAuth Apps 中设置的Authorization callback URL，而这里我们配置的都是首页，所以会跳向首页就可以理解了，那也就是说这里的地址和回调地址里我们传的redirect_uri不匹配，那就检查这两个地址吧，对比之后果然发现了一些有意思的事情： 123redirect_uri https://ergou.fun/posts/3834.htmlAuthorization callback URL http://ergou.fun 一个是http，一个是https，当然匹配不上了啊！摔！修改一下，Authorization callback URL改为https，来来来测试一下，OK，完美解决。 后记 如果你仔细观察的时候，你会发现跳向博客首页的时候，地址栏链接变的很复杂，都是些什么东西呢，我们不妨解析一下 12345https://ergou.fun/?error=redirect_uri_mismatch&amp;error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&amp;error_uri=https://developer.github.com/apps/managing-oauth-apps/troubleshooting-authorization-request-errors/#redirect-uri-mismatch//真是贴心啊，错误原因，和参考文档地址全都给了","link":"/posts/47886.html"},{"title":"layer.js错误Uncaught TypeError: i is not a function","text":"最初是要写一个管理后台来着，项目中需要用到弹出层，但是没有前端配合，我一个小PHP需要去写这玩意，怎么办呢？查了一些资料，发现layer对我来说还行，文档写的也比较完全，学习成本不高，就下决心用这个了。但是现实总是会给你泼冷水，刚引入就报了一个莫名其妙的错误。 呐，就是这个，我自己一个人在那里纳闷，卧槽，我啥也没做啊，我只是引入进来怎么还报错了呢？ 我还心想着，这个layer.js也已经被很多人用了，不太可能是这个插件的问题吧。我就把引入的js文件一个一个的注释掉，开始排查，后来发现，单独引入layer，或者单独引入JQuery都是没有问题的，但是同时引入的话，就会报错，我也有点懵逼了，什么鬼，这两个js冲突了？后来突然想到，马丹，layer.js是依赖于JQ的。后记：其实以上问题都是不仔细看别人的文档造成的。 来自layer.js官网的说明：","link":"/posts/32812.html"},{"title":"layer快速点击会触发多次回调","text":"场景还原 测试同学反馈点击了一次操作，为什么会有两条操作记录？ 我：？？？？ 排查思路 查看日志，看一下是不是发了两次请求，果不其然啊： 并发了，同一时间发送了两次请求，出现了脏写。 原因 系统的confirm是线程阻塞的，而layer.confirm是非阻塞的，这一点在官方的API文档中有提到。 解决方案 12345678910var lock = false;layer.confirm('is not?',{btn:['确定','取消']},function(index){ if(!lock) { //加锁防止多次回调 lock =true; $.ajax({ // ..... }) }})","link":"/posts/23580.html"},{"title":"linux操作利器alias用法","text":"写在前边学习这件事，有时候并不一定很刻意，而是从生活，从经验中去积累，不知道什么时候就发生了。 type 命令 一般情况下，type命令被用于判断另外一个命令是否是内置命令，但是它实际上有更多的用法。 1.判断一个名字当前是否是alias、keyword、function、builtin、file或者什么都不是； 2.判断一个名字当前是否是alias、keyword、function、builtin、file或者什么都不是的另一种方法（适用于脚本编程）； 3.显示一个名字的所有可能； 4.查看一个命令的执行路径（如果它是外部命令的话）； 5.强制搜索外部命令。 详细参见这位老哥的博客 type命令使用 alias 命令 我们在服务器上查看日志的过程种，不可避免的要记住一大串的路径，比如说/export/www/logs_backend/Java_service_logs/,每次链接到服务器都要输一遍这个长长的路径才能进入日志目录，Linux就给我们提供了一个简单的方法来避免这种操作，就是alias,当然你也可以用软连接来简化这个过程，不过用alias会更为简单。 说这个之前我们要提一下type这个命令： 我们用到的是上边说的type命令的第一个功能，用来测试一下我们要自定义的别名有没有被占用 1234567#如果没被占用dell@DESKTOP-8U4HTOL MINGW64 /d/develop$ type tbash: type: t: not found#如果被占用了$ type llll is aliased to `ls -l' 用法：alias [-p] [name[=value] … ] 注意=和字符串之间不能包含空格 1.命令alias 直接使用命令alias可以查看当前登录环境下的所有命令别名 1234$ aliasalias ll='ls -l'alias log='cd /d/develop/backend/storge/logs'alias ls='ls -F --color=auto --show-control-chars' 2.设置别名 alias 别名='完整命令' 1$ alias log='cd /d/develop/backend/storge/logs' 3.命令alias + 命令 这将显示这个别名命令的具体含义 12$ alias logalias log='cd /d/develop/backend/storge/logs' 4.给一组命令设置别名 1234567891011121314dell@DESKTOP-8U4HTOL MINGW64 /d/develop$ type tbash: type: t: not founddell@DESKTOP-8U4HTOL MINGW64 /d/develop$ alias t='cd /d/study;mkdir test;touch 01.txt'dell@DESKTOP-8U4HTOL MINGW64 /d/develop$ tdell@DESKTOP-8U4HTOL MINGW64 /d/study$ lltotal 1-rw-r--r-- 1 dell 197121 0 4月 4 16:03 01.txt 5.持久化别名 以上说的方法，都是临时性的，只在当前登录环境下有效，一旦退出登录就会失效，要想持久化，需要修改/etc/bash.bashrc centos下是/etc/bashrc,ubuntu下为/etc/bash.bashrc vi /etc/bashrc 在文件末尾添加alias log=’cd /d/develop/backend/storge/logs’并保存退出 执行source /etc/bashrc 使配置生效 以上。","link":"/posts/62801.html"},{"title":"linux服务器文件传输利器lrzsz","text":"场景&emsp;&emsp;服务端开发人员经常会遇到的一个场景就是将本地的文件传到服务器上，或者把服务器上的文件下载到本地，那这个时候大家一般会用ftp服务，来完成这件事。但是如果服务器上并没有安装ftp服务的时候，这个操作就显的很繁琐。那有没有轻量的，方便又好用的工具呢？这就要说到我们今天要给诸位介绍的这个小工具了lrzsz。 关于lrzsz&emsp;&emsp;lrzsz是一个unix通信套件提供的X，Y，和ZModem文件传输协议,可以用在windows与linux 系统之间的文件传输，体积小速度快。 安装lrzsz&emsp;&emsp;安装可以用源码安装也可以以所在平台的软件管理工具下载。 1.以centos为例：1yum -y install lrzsz 2.源码安装：1234567891011# 下载安装包wget http://down1.chinaunix.net/distfiles/lrzsz-0.12.20.tar.gztar -zxvf lrzsz-0.12.20.tar.gzcd lrzsz-0.12.20# 编译./configure –prefix=/usr/local/lrzszmakemake install# 把命令加入$PATHln -s /usr/local/lrzsz/bin/lrz /usr/bin/rzln -s /usr/local/lrzsz/bin/lsz /usr/bin/sz lrzsz使用1.sz: 将选定的文件发送(send)到本地机器。example:1sz /home/wwwlog/nginx.error.log 2.rz: 运行该命令会弹出 一个文件选择窗口, 从本地选择文件上传到服务器(receive)。 12#rz命令不使用参数即可，会弹出系统自带文件选择框rz xshell or SecureCRT&emsp;&emsp;在xshell和SecureCRT中，执行sz命令的表现略有不同，xshell会弹出保存位置选项，而CRT采用的是默认位置，这是个配置项。可以依次打开菜单Options -&gt; session options -&gt; X/Y/Zmodem进行设置。 结语&emsp;&emsp;贼拉好用，隔壁后端大哥都感动哭了。","link":"/posts/26716.html"},{"title":"mysql中的sql_mode导致的datetime类型字段不能为0000","text":"问题描述： 在执行建表语句的时候，出现invalid default datetime value '0000-00-00 00:00:00',从字面意思看，就是不合法的默认值’0000-00-00 00:00:00’，但是为什么呢？，datetime类型应该是允许这样的值出现。 排查：这个时候我们需要执行 1select @@sql_mode; 你会发现值是这样的： 12@@sql_mode = &apos;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos; 各项数值含义： ONLY_FULL_GROUP_BY 对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么将认为这个SQL是不合法的，因为列不在GROUP BY从句中 STRICT_TRANS_TABLES 在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做任何限制 NO_ZERO_IN_DATE 在严格模式，不接受月或日部分为0的日期。如果使用IGNORE选项，我们为类似的日期插入’0000-00-00’。在非严格模式，可以接受该日期，但会生成警告。 NO_ZERO_DATE 在严格模式，不要将 ‘0000-00-00’做为合法日期。你仍然可以用IGNORE选项插入零日期。在非严格模式，可以接受该日期，但会生成警告 ERROR_FOR_DIVISION_BY_ZERO 在严格模式，在INSERT或UPDATE过程中，如果被零除(或MOD(X，0))，则产生错误(否则为警告)。如果未给出该模式，被零除时MySQL返回NULL。如果用到INSERT IGNORE或UPDATE IGNORE中，MySQL生成被零除警告，但操作结果为NULL。 NO_AUTO_CREATE_USER 防止GRANT自动创建新用户，除非还指定了密码。 NO_ENGINE_SUBSTITUTION 如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常。 解决方案： 经过排查，问题已经很明显了，所以我们怎么做呢? 答案就是去掉NO_ZERO_IN_DATE&amp;&amp;NO_ZERO_DATE。 1234#1.先执行这句更改SQL模式set @@sql_mode = &apos;NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;;#2.在执行要执行的建表语句create table ....... 以上。","link":"/posts/57518.html"},{"title":"wordpress插件开发从创建一个新的菜单开始","text":"创建插件的目的1.我们为什么要创建一个插件？ IT界有一个知名的论调叫做不要造重复的轮子，如果有可能的话，你应该尽可能的从现有的网络资源上选择一个已有的插件来使用，而不是重新创造一个。它耗费的精力很可能是没有相应价值的。所以在创建一个插件之前，你应该先去wordpress的插件仓库搜索关键词，看一下是不是已经有了满足需求的插件。 2.你希望你的插件具有什么功能？ 在开始开发之前，想好这个问题，能帮你省去很多麻烦。比如，你的插件是提供给前台页面使用的还是在后台页面使用的？是后台的独立模块么？它应该有哪几个页面，页面上应该有哪些功能？怎么去设计这个页面的布局？这些问题，都需要有一个清晰的规划。 前置工作尽管我们在梳理开发流程中已经提到了如何创建一个插件，但是我们还是要再说一次，以防有些读者没有看到。 1.打开WordPress安装目录下的wp-content目录。 2.打开plugins目录。 3.创建一个新目录并在插件后命名（例如plugin-name）。 4.打开新插件的目录。 5.创建一个新的PHP文件（例如，在插件后命名此文件也很好plugin-name.php）。 开始开发就像下面的示例一样，你必须在你创建的主插件文件的开头加上一段doc注释来告诉wordpress这是个插件，当然也可以加上作者，邮箱等信息，下面只是简单示例，详细可以在我们梳理流程的那边博文/或者官网中看到。 123456789//wp-content/plugin-name/plugin-name.php&lt;?php/** * Plugin Name: 插件名称 */function do_something_else(){ //.....你的代码} 还记得我们在第一篇梳理中提到的三个基础插件钩子么？ 1.register_activation_hook //启用插件时触发的钩子 2.register_deactivation_hook//禁用插件时触发的钩子 3.register_uninstall_hook//删除插件时触发的钩子 我们可以通过这三个钩子函数来做一下一些前置/后置的处理，比如说插件被启用时创建一个自定义数据表，初始化一些配置，禁用时恢复初始化设置，删除时删除自定义的数据表。 这里我们先不展开来讲我们在讲OptionApi的时候再讲这个。 准备工作都已经做好了，我们现在开始正式的开发。我们假设说我们要做的是一个额外的内容管理插件。那我们现在想要在后台创建一个定制内容管理菜单，该怎么做呢？ wordpress向我们提供了一个add_menu_page的函数： 123456789101112/** //我们先看一下函数的参数 add_menu_page( string $page_title, //页面标题 string $menu_title, //菜单名称 string $capability, //权限级别 string $menu_slug, //菜单标识 唯一 callable $function = '', //回调函数 其实就是点击这个菜单后触发的函数 我们可以返回一个页面 string $icon_url = '', //图标，可以为空 int $position = null //位置 决定了菜单应该插入在第几个 );**/ 那我们应该怎么使用呢？ for-example : 你的wp-content/plugin-name/plugin-name.php文件，看起来应该像这样：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?php/* Plugin Name: 定制内容管理 Plugin URI: http://ergou.fun Description: 内容管理模块（自定义内容非posts） Version: 1.0 Author: ergou Author URI: http://ergou.fun Copyright 2019 ergou (email : 531432012@qq.com) This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA*//** 第1步：创建自定义菜单的函数**/function ergou_cms_plugin_menu(){ add_menu_page('定制内容管理', '内容管理', 'manage_options', 'ergou-cms-manager', 'ergou_cms_plugin_options', '', 7);}/** 第2步：将函数注册到钩子中 */add_action('admin_menu', 'ergou_cms_plugin_menu');/** 第3步：定义选项被点击时打开的页面 */function ergou_cms_plugin_options(){ if (!current_user_can('manage_options')) { wp_die(__('You do not have sufficient permissions to access this page.')); } //include_once(plugin_dir_path(__FILE__) . 'detail/index.php'); //也可以直接返回HTML，不过我建议是额外放一个文件，这样以后维护起来好处理 //你可以直接 echo \"hello world\" echo \"Hello World\"; wp_die();} 我们现在回到我们的后台管理页面点击插件管理你会发现多了一个，定制内容管理的菜单，点击启用。菜单就会增加在左侧顶级菜单里。点击定制内容管理菜单，页面输出了&quot;Hello World&quot;。至此，我们算是完成了第一步。 本篇内容就是这些。That’s all .Thank you .","link":"/posts/18296.html"},{"title":"wordpress插件开发流程梳理","text":"1.声明一个插件 首先我们必须明白，wordpress的插件可以是单文件，也可以是多文件，css/html都不是必须的，以下举例暂且在单文件模式下 比如我们要创建一个名为 hellophp的插件，那我们就需要在wp-content/plugins目录下新建hellophp文件夹和hellophp.php文件，但是这还是不能让系统识别这个插件。插件的主文件名要和目录一致。 在wordpress中，要让系统识别一个插件，首先要做的就是，声明一个DOCBLOCK(文档块) 示例： wp-content/plugins/hellophp/hellophp.php 12345678910111213141516&lt;?php/** * Plugin Name: hellophp * Plugin URI: https://example.com/plugins/the-basics/ * Description: Basic WordPress Plugin Header Comment * Version: 0.0.0 * Author: WordPress.org * Author URI: https://author.example.com/ * License: GPL2 * License URI: https://www.gnu.org/licenses/gpl-2.0.html * Text Domain: wporg * Domain Path: /languages */ //完整的示例是这样，但是除了Plugin Name其他都不是必须的 2.初始化插件 wordpress-hook register_activation_hook( FILE, ‘pluginprefix_function_to_run’ ); //启用插件时的钩子 register_deactivation_hook( FILE, ‘pluginprefix_function_to_run’ );//停用插件时的钩子 示例： 示例摘自官方文档，启动插件钩子最常见的用途之一是当插件注册自定义帖子类型时刷新WordPress永久链接。这摆脱了令人讨厌的404错误。 123456789101112131415161718192021222324//启用插件时的处理function pluginprefix_setup_post_type() { // register the \"book\" custom post type register_post_type( 'book', ['public' =&gt; 'true'] );}add_action( 'init', 'pluginprefix_setup_post_type' ); function pluginprefix_install() { // trigger our function that registers the custom post type pluginprefix_setup_post_type(); // clear the permalinks after the post type has been registered flush_rewrite_rules();}register_activation_hook( __FILE__, 'pluginprefix_install' );//停用插件时的处理function pluginprefix_deactivation() { // unregister the post type, so the rules are no longer in memory unregister_post_type( 'book' ); // clear the permalinks to remove our post type's rules from the database flush_rewrite_rules();}register_deactivation_hook( __FILE__, 'pluginprefix_deactivation' ); 如果您不熟悉注册自定义帖子类型，请不要担心 - 稍后将对此进行介绍。使用这个例子只是因为它很常见。 注：这部分看不懂也没关系，这两个钩子也并不是必须的，如果你要做一些必要的前置工作，比如说启用插件时，创建一个新的数据表，初始化一些变量之类的前置操作来保证插件的正常运行，可以使用这个钩子，如果没有这样的操作，这个钩子不用也可以。 3.插件的卸载从站点卸载插件时，您的插件可能需要进行一些清理。 如果用户已停用插件，则会认为已卸载插件，然后单击WordPress管理中的删除链接。 卸载插件时，您需要清除插件和/或其他数据库实体（如表）的任何插件选项和/或设置。 卸载插件有两种方法： 系统的钩子函数 1register_uninstall_hook(__FILE__, 'pluginprefix_function_to_run'); 自定义卸载脚本uninstall.php 你需要在你插件的根目录创建一个uninstall.php文件 示例： 示例脚本演示了一个删除自定义表的清理工作。 1234567891011121314151617// if uninstall.php is not called by WordPress, die// 防止误操作直接访问该文件if (!defined('WP_UNINSTALL_PLUGIN')) { die;} $option_name = 'wporg_option'; //这两行是删除插件的一些附加配置，后边我会继续说这个delete_option($option_name); // for site options in Multisitedelete_site_option($option_name); // drop a custom database tableglobal $wpdb;$wpdb-&gt;query(\"DROP TABLE IF EXISTS {$wpdb-&gt;prefix}mytable\"); 这是wordpress插件开发流程梳理的第一篇，就先这样，后续会继续梳理。本文的示例和描述，大部分来自官方文档。","link":"/posts/5344.html"},{"title":"wordpress插件开发流程梳理(二)插件最佳实践","text":"开发插件的最佳实践避免命名冲突当您的插件对变量，函数或类使用相同的名称作为另一个插件时，会发生命名冲突。 幸运的是，您可以使用以下方法避免命名冲突。 程序性默认情况下，所有变量，函数和类都在全局命名空间中定义，这意味着您的插件可以覆盖由另一个插件设置的变量，函数和类，反之亦然。在函数或类中定义的变量不受此影响。 前缀一切所有变量，函数和类都应以唯一标识符为前缀。前缀可防止其他插件覆盖您的变量并意外调用您的函数和类。它也会阻止你做同样的事情。 检查现有实现PHP提供了许多函数来验证变量，函数，类和常量的存在。如果实体存在，所有这些都将返回true。 变量： isset() （包括数组，对象等） 函数： function_exists() 类： class_exists() 常量：defined() OOP面向对象解决命名冲突问题的一种更简单的方法是使用类来获取插件的代码。 您仍然需要检查是否已经使用了您想要的类的名称，但其余的将由PHP处理。 示例： 12345678910111213141516&lt;?phpif ( !class_exists( 'WPOrg_Plugin' ) ) { class WPOrg_Plugin { public static function init() { register_setting( 'wporg_settings', 'wporg_option_foo' ); } public static function get_foo() { return get_option( 'wporg_option_foo' ); } } WPOrg_Plugin::init(); WPOrg_Plugin::get_foo();} 目录结构：12345678910111213/plugin-name plugin-name.php //插件主文件，必须和文件夹名保持一致 uninstall.php //卸载插件时自动运行的脚本 /languages //国际化语言包 /includes //其他功能脚本 /admin /js /css /images /public /js /css /images 条件加载将管理代码与公共代码分开是有帮助的。使用条件is_admin()。 示例：12345&lt;?phpif ( is_admin() ) { // we are in admin mode require_once( dirname( __FILE__ ) . '/admin/plugin-name-admin.php' );} 文件结构参考 单个插件文件，包含函数 单个插件文件，包含类，实例化对象和可选功能 主插件文件，然后是一个或多个类文件 参考模板对于您编写的每个新插件，您可能希望从样板开始，而不是从头开始。使用样板的一个优点是在您自己的插件之间保持一致。如果使用他们熟悉的样板，使用模板也可以让其他人更容易为您的代码做出贡献。 这些也可作为不同但可比较的架构的进一步示例。 WordPress插件Boilerplate 注：本篇，完全是由官方文档翻译而来，描述了一个好的插件的最佳实践。该用什么样的目录结构，什么时候该做一些权限的判定，甚至Github上提供了一些可参考的模板，以防我们的代码写出来像坨屎一样。我也希望自己写出来的插件，且不说功能如何，最起码不被喷This is shit .所以你看到，我们现在花一些功夫来从头梳理，流程。真正开发流程中遇到的问题，我会在后边的时候提到。","link":"/posts/45909.html"},{"title":"一个有趣的BUG","text":"一个很有意思的Bug 某天测试同学再次向我反馈，你这个删除按钮虽然置灰了，但是还是可以点击啊？ 我：？？？？（黑人问号） 卧槽？不可能啊，按钮都disabled了，怎么还可以点击？还能触发click事件？开玩笑的吧？，匆忙应付了测试同学开始复现这个Bug. 复现 重新写了个页面demo，开始测试，卧槽？复现不了啊，这尼玛。。。。？ 叮！事情の真相 没办法复现很烦啊，什么鬼？遂去原页面检查，然后发现了这样一段代码： 123456789&lt;div class=\"btn-cancel\"&gt; &lt;button disabled&gt;删除&lt;/button&gt;&lt;/div&gt;&lt;script&gt;$(\".btn-cancel\").click(function(){ //业务逻辑....})&lt;/script&gt; 卧槽，点击事件居然是绑定在div上的，由于button在div内部并且是disabled，button处于不可点击的状态，所以测试同学点击到的其实是div!!! 真的是十分的有意思了。Funny!","link":"/posts/25776.html"},{"title":"使用vagrant一键部署本地php开发环境（二）制作自己的vagrant box","text":"在上篇的基础上 ，我们已经安装好了virtualbox和vagrant，没有安装的话，参照上篇 使用vagrant一键部署本地php开发环境（一） 1.从网易镜像或阿里等等镜像下载Centos7http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1804.iso 2.打开virtualbox进行虚拟机安装——————具体步骤自己百度，没什么难的。 3.虚拟机安装好之后1）以root用户登陆 登陆之后依次执行 adduser vagrant 和 passwd vagrant命令，创建vagrant用户密码也设置为vagrant。 为vagrant用户配置sudo免密权限：12chmod 0777 /etc/sudoersvim /etc/sudoers 依次执行这两个命令 在root行下新增vagrant用户，参照图片设置。完事esc :wq保存退出 执行chmod 0440 /etc/sudoers 恢复默认权限 2）配置ssh 执行 yum install openssh-server 如果没安装的话安装一下，如图是已经安装过的。 安装完毕之后执行 vim /etc/ssh/sshd_config 打开监听和端口，并把允许root用户远程登陆打开。 4.下载官方公钥配置 vagrant ssh1）. 下载官方公钥1wget https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub 2）. 重命名authorized_keys，移动到.ssh文件下 mv vagrant.pub .ssh/authorized_keys 3）. 修改authorized_keys文件权限 除了属主vagrant以外，group和其他用户都不可写 chmod go-w /home/vagrant/.ssh/authorized_keys 5.安装virtualbox增强工具，为共享目录做准备1).点击菜单中的 设备 &gt; 安装增强功能 2).切换到根目录创建cdrom目录 cd / &amp;&amp; mkdir cdrom &amp;&amp; mount /dev/cdrom /cdrom 3).切换到/cdrom并安装高级功能 cd /cdrom &amp;&amp; ./VBoxLinuxAdditions.run 4).安装完成关闭虚拟机 6.设置网络规则网卡1按照如下设置，端口转发规则2222-》22 网卡2设置： 7.打包制作box在本地主机的任意目录 执行1vagrant.exe package --base centos(virtualbox中显示的虚拟机的名称) --output centos-lnmp.box(你给box起的名字，随意)，该操作会在当前目录下生成 centos-lnmp.box 接下来你懂的。就又回到第一篇，如何使用box上了","link":"/posts/11255.html"},{"title":"关于Mysql:unknow column in where clause","text":"写在前边： 已经很久不更新了啊，整个2月份几乎没有遇到什么新鲜事。直到昨天我又犯了一次傻，貌似只有我犯傻的时候才有材料可以跟大家分享….. 问题表现： mysql 报错： unknow column ‘sys’ in where clause 。 事实上这是个挺常见的错误,我猜你大概会说，这个问题不是已经很明了了么？ 你查询了一个不存在的字段！ 可是事情的真相真的是这样么？并不是，报这个错误的原因还有一种可能就是你的where条件中字符串的拼接出了问题。 现场还原： 还是先说一下我犯的傻吧 我首先开始排查的问题的时候输出了我的查询SQL，形似 12$sql = 'select * from user where id in ('.implode(',',$idArr).')'; $idArr为 一个元素很多 的ID数组，里边的内容都是整型的数字，所以我也没想很多，然后抛出了这个mysql错误，我开始检查我的sql语句 。我用记事本打开了我刚刚打印的sql，开始搜索sys这个关键词，但是我没注意到我鼠标的位置，记事本默认向下搜索，提示没搜索到。我后来就随机把这个SQL中的id字符串删掉了一段，删的只剩几个，执行，诶！好了！我开始疑惑，难道整型的id查询在数据长的时候会出问题么？加上在CSDN看到某博客上说是字符串拼接的问题，所以我决定给他做一下处理，顺带加上了这么一段注释。 12345//做一下处理换成字符串否则在$IdString过长的时候会引发unknow column 'sys' in where clause 错误 foreach ($idArr as &amp;$v) { $v = '\\''.$v.'\\''; } 加上之后，问题果不其然的解决了，好的，没有问题，完美！然后开开心心的上个线。 引发问题的真实原因 到了晚上快下班的时候，我在开发另一个需求的时候，突然在列表里看到了一个名为sys的用户！真的是瞬间像是被一道闪电击中了！卧槽！ （这绝对值两个卧槽，才能表达我当时的内心！），是的就是你想的那样！那个用户id数组里有一个用户的id是sys，而这东西是个字符串，但是却没被引号包裹。所以才引发了mysql的unknow column 'sys' in where clause错误。这才是错误的真相！ 好了，不说了，趁着还没有同事发现，我要把这个包含了我愚蠢猜测的注释给删掉。 溜了溜了。","link":"/posts/55261.html"},{"title":"使用vagrant一键部署本地php开发环境（一）","text":"一：我们为什么需要用这玩意我们在开发中经常会面临的问题：环境不一致，有人用Mac有人用Windos还有几个用linux的，而我们的服务器都是linux。在我本地是可以的啊，我测了都，没有问题啊，然后看着上线之后的500错误懵比。It works on my pc . 二：vagrant是什么东西Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它 使用Oracle的开源VirtualBox虚拟化系统，使用 Chef创建自动化虚拟环境。——————-来自百度百科。 直白的说是一键生成特定虚拟机的工具。详细的我们下边会说。 三：所需的软件：1、virtualBox可以到VirtualBox的官网进行下载：https://www.virtualbox.org/wiki/Downloads 2、vagrant可以到vagrant官网下载https://www.vagrantup.com/downloads.html 这个下载特别慢，这里放出百度云的链接 链接: https://pan.baidu.com/s/1Toy3SRRACOWa8g0ybUHD8Q 密码: puwm 3、vagrant box vagrant部署环境，需要一个box文件。如果在公司里面，可以从他们那里拷一个box文件安装。这样安装的环境与他们的开发环境是一致的。box文件也可以在网上下载。搜索：vagrantbox http://www.vagrantbox.es/ （备注：这个地址实际上是失效的，很多box文件都找不到资源了，不过不要紧，因为我们可以自己做一个box，这个在下一篇文章我会讲如何定制一个自己的box，顺道放一个我制作好的基于centos7且安装好lnmp1.5的box）链接: Centos-lnmp.box密码: tssp 四：工作流程 五：vagrant的日常使用下载以上vagrant和virtualbox之后，一路next安装，安装完成之后。 在任意位置新建一个文件夹，来管理你的box ，比如我们在D盘新建一个vagrant文件夹 1.把你下载的box文件扔进来，如图： 2.我们在这个位置打开git-bash，或者用cmd切换到这个目录，我们以git-bash为例： 1）执行1vagrant.exe box add centos centos-lnmp.box 该命令是给box起名并添加到box列表 需要注意的就是在cmd命令窗口下可以不用.exe 直接执行1vagrant box add {name(你要起的名字随意)} {url/file(本地文件地址或远程地址)} 2）执行命令1vagrant.exe init {centos(刚刚add操作时起的名字)} 就像这样，这个命令会初始化box并生成一个Vargrantfile的配置文件，在这个文件里我们可以 设置一些配置信息，比如共享主机目录到虚拟机目录，网络，虚拟机ip等信息。 打开配置文件 这些配置项默认都是注释掉的，我们需要找到这两行进行设置。其中共享目录的配置我们可以这样写，第一个参数为本地目录，第二个参数是虚拟机目录，/ 代表了虚拟机下的根目录。 通过共享目录设置，我们可以把我们的项目开发目录映射到虚拟机目录，通过虚拟机配置nginx，来让项目直接跑在虚拟机中。1config.vm.synced_folder &quot;D:/data&quot;, &quot;/vagrant_data&quot; 3）部署环境 执行命令1vagrant.exe up 就可以一键部署虚拟机环境了 4）虚拟机管理 执行命令 vagrant.exe ssh vagrant.exe ssh就能直接链接到虚拟机的系统了，目录已经挂载好了，接下来就是考验你linux操作能力的时候了，我们可以在这上边查看日志等等一系列事情。 备注:你也可以通过xshell来链接你的虚拟机，ip就是你配置的ip端口22，用户名密码均为vagrant 一般来说虚拟机启动之后就不需要管了。不过对于项目开发而言，你还需要做的一件事就是修改本地的hosts文件，让你请求的虚拟域名指向你的虚拟机ip。 六：vagrant常用命令 vagrant init # 初始化 vagrant up # 启动虚拟机 vagrant halt # 关闭虚拟机 vagrant reload # 重启虚拟机 vagrant ssh # SSH 至虚拟机 vagrant status # 查看虚拟机运行状态 vagrant destroy # 销毁当前虚拟机 vagrant box list # 查看本地box列表 vagrant box add # 添加box到列表 vagrant box remove # 从box列表移除","link":"/posts/2021.html"},{"title":"关于浏览器请求PHP一次请求执行了两次","text":"测试同学今天又双叒反馈了一个Bug 继上次解决了重复请求的问题之后，本来就以为可以万事大吉了，没想到我还是太年轻了，测试同学说，不行啊，老哥，你这个我点击了一次创建居然创建出来两条数据！！并且查看日志的时候，确实是发了两次网络请求！！！ 我：？？？？？ 排查 1.先看看是不是JS的问题，我们看一下network跟踪一下，没有啊，这只发送了一个请求，挠头，继续， 2.好的，我去我的工位上复现一下，在JS处打断点，没有啊，ajax这里只进来一次，好吧，继续查， 3.好的，把host地址改向测试机,请求，我擦，日志正常，结果也正常是一条数据啊，根本没办法复现啊。 这。。。It works on my computer ! 这就非常的有趣了，测试同学和我访问的都是同一台测试机，为什么，我创建没问题，他创建就有问题呢。好奇怪，首要之急要解决问题的话，就避免重复请求，在代码里判断一下请求间隔。可是不应该啊，有这么麻烦么？我不死心啊？ 猜想&amp;&amp;解决 讲道理，没道理一个请求到后边代码会执行两次的，会不会是有个多个进程的原因？我们重启一下NGINX好了，在服务机上执行 1/etc/init.d/nginx resatrt 测试大哥，快执行一下试试，诶，好了耶。 好的，完美。 20190128 不得不来补充点东西 本来以为就是这样只是进程被卡住的原因，然而并没有，测试大哥后来多次给我反馈，在我还没有说话的时候就回，我重启了，没用！ 好吧好吧，这个问题本来就是我们偷懒了，按说我们是应该在测试服务器上打日志，看一下代码走进来多少次的，额。。。 后来测试大哥有一次反馈这个问题，我觉得问题实在是严峻到了不得不解决的时候，重新排查，在数次复现无果之后，network也只有一次请求。我回复测试大哥，大哥，要不咱们换个浏览器？ 换一个，OK，没有再重复了。很好，换回chrome，我擦又重复了。 老哥，检查一下你chrome的插件，好吧，我们打开拓展程序，一个诡异的插件映入眼帘 页面自动刷新 我擦，这是什么东西？？？停掉，快停掉！再试一下，果真没有重复数据的问题了。 F**king ! ! !","link":"/posts/3834.html"},{"title":"关于hexo-abbrlink链接undefined","text":"关于hexo-abbrlink hexo-abbrlink是一个hexo博客链接永久化的解决方案 支持使用不同的算法和进制对文章链接进行转换 算法 进制 生成链接 crc16 hex https://post.zz173.com/posts/3ab2.html crc16 dec https://post.zz173.com/posts/12345.html crc32 hex https://post.zz173.com/posts/9a8b6c4d.html crc32 dec https://post.zz173.com/posts/1690090958.html 安装 1npm install hexo-abbrlink --save 使用 打开config.yml，修改permalink中类似这样 1permalink: posts/:abbrlink.html 具体说明参照作者的github说明 项目地址在这里 可能出现的问题： 终于回到标题上来，有的同学说，这个配置完成之后，文章的链接都变成了undefined,新的文章没问题，老的文章就不行了。这个问题其实我们仔细想一下就能明白，我们首先要执行hexo clean 清楚掉以前生成的文章缓存，然后hexo g重新渲染就ok了。","link":"/posts/733.html"},{"title":"写在2019年开始工作的第一天","text":"回京 多调休了1.5天，初六晚上我坐上了发往北京的火车。一夜的硬座，睡的不是很好，旁边有个大叔还一直在咒骂走走停停的火车，无意义的嚎叫着他的傻屌言论。早上9点的时候列车抵达，一路上，透过窗可以看到窗外飞扬的大雪，北京，终于下雪了啊。 出了地铁站，一路顶着漫天飞舞的雪花往住处走，心里控制不住的开心。很久没有见过这样的大雪了啊！尤其，是在北京。听人说，下了雪的北京，便是北平了，是真正的北国风光。这一路走来，这些雪中的精灵，或隐于发梢，或藏于眉际，还有往脖子里跳的，端的是无比的皮。虽然是一个地地道道的北方汉子，看过了很多场雪，但这场雪尤其让人开心，提着行李箱，心已经飞起来了，我摘下帽子，肆意的让他们落在我的头发上，肩膀上。真真是妙不可言。 工作 说了这么多，不还是逃不过去上班的命运？嘻嘻嘻 9点到北京过了40分钟左右的安检，直到接近11点才到住处，洗个澡吃个饭，美滋滋的去上班了，告辞 到了公司，翻出来年前写的代码，Emmm 好像没有什么可以做的事情，该写的东西都写完了啊。迫于没有正事干，公司的暖气一会就给我吹的打起瞌睡来，我心里吓了一大跳，这可不行啊，leader就在后边坐呢。Emmm , 去楼下走走吧，那首歌是怎么唱来着，吹吹冷风会清醒的多 , 下去去超市买了个薄荷味的炫迈，Nice 兄弟，炫迈，根本停不下来。（此处应该有广告费）逛了一圈回来，带我的大哥说，Emmm，你看一下前台的代码吧，前台的代码后期如果有什么问题，你也可以跟着修复一下，我：卧槽，有事情做了耶！ 关于2019 强哥之前给我说，我们PHP程序员的成长路径还是很清晰的，PHP+MYSQL+NGINX+LINUX这是基础，要列一个清单，每年看一本书，每年攻其中的一个，从原理到应用。这样就会越来越秃（划掉），越来越强。是啊，都9012年了，我得时间不多了，是要好好学习，沉淀技术了。我要去学习了，告辞！","link":"/posts/25938.html"},{"title":"如何丧心病狂的使用python爬虫读小说","text":"写在前边 其实一直想入门python很久了，慕课网啊，菜鸟教程啊python的基础的知识被我翻了很多遍了，但是一直没有什么实践。刚好，这两天被别人一直安利一本小说《我可能修的是假仙》，还在连载中的，我等屌丝，打钱是不可能打钱的，只好先去网上找一下资源了，基本笔趣阁啊，什么的提供很多在线的资源给我们。好吧，就看这个就行了，可是看也看得不爽啊，，浏览器上下部分都被什么 美女荷官在线发牌，一夜不射提升半小时之类你懂的画面遮盖了，还经常误触，如果是在电脑上看，我们可以用ADBLOCK之类的广告插件屏蔽，可是手机浏览器貌似没有插件啊，那怎么办呢？我可是程序员啊，程序员怎么能向这种问题低头呢？ 解决方案 我们把在线网页上的章节名和章节内容都保存下来，造一个离线的版本不就没这个问题了么？ 那怎么保存呢，这就需要我们的主角出场了，铛铛铛，python scrapy爬虫框架 关于scrapy 向大家推荐 一个好玩的有趣的牛逼的网站scrapy中文教程 这个作者写的很有趣，摘录一下： 本scrapy文档，主要是给诸君介绍一下神马是scrapy，scrapy能干神马，提提大伙的学习热情！scrapy是一个网页爬虫框架，神马叫做爬虫，如果没听说过，那就：内事不知问度娘，外事不决问谷歌，百度或谷歌一下吧！……（这里的省略号代表scrapy很牛逼，基本神马都能爬，包括你喜欢的苍老师……这里就不翻译了） 爬虫代码 1234567891011121314151617181920212223242526272829import scrapyclass firstdemo(scrapy.Spider): # 爬虫名称 name = 'firstdemo' # 第一页 start_urls= ['http://m.biquku.la/16/16889/578155.html'] def parse(self,response): filename = '我可能修的是假仙.txt' # 章节名 title = response.css('.zhong::text').extract_first() # 章节内容 content = response.xpath(\"string(//article[@id='nr'])\").extract()[0].replace('\\n','').replace('\\xa0','') self.log(title) with open(filename,\"a+\",encoding='utf-8') as f: f.write(title) # 添加章节目录 f.write('\\n') # 添加换行（\\n）是为了让txt阅读器识别章节目录 f.write(content) f.write('\\n') f.close next_page = response.css('.nr_page a::attr(href)').extract()[2] if next_page is not None: next_page = 'http://m.biquku.la'+next_page yield scrapy.Request(next_page,callback=self.parse) else: self.log('已到最终章节') 没想到吧，代码就这么多，具体的教程可以参见向大家推荐的那个网站。最后我们执行scrapy crawl firstdemo就开始爬取了。 最后 最后？哪里有什么最后？都下载下来了，还不抓紧去看一下我们的战斗成果？ 当然还是要提醒诸位，学习为主，不要玩物丧志。","link":"/posts/51984.html"},{"title":"如何修改layer/layui中的confirm","text":"需求： 改成 背景： 这个confirm是layui中的layer弹出框，要想修改这个弹出框的内容岂不是要去修改源码？当我在源码里扒拉半天梳理好了逻辑之后，突然意识到，其实我本可以不必这么麻烦的，直接找到这个弹窗append元素进去就不就完了么？卧槽！所以我在代码里加了一行注释 浪费在这里的时间=2h 10分钟可以搞定的解决方案： 1234567var option = {1:'筛选项1',2:'筛选项2'};var optionString = '';for(let i in option) { optionString =optionString+'&lt;option value=\"'+i+'\"&gt;'+option[i]+\"&lt;/option&gt;\";}//一定要给加入的元素加入id，提交的时候取值方便$(\".layui-layer-content\").append(\"&lt;br/&gt;&lt;select id='reinvest_type'&gt;\"+optionString+\"&lt;/select&gt;\"); 结语 尽可能的不要犯蠢吧，有些问题并不像看上去那么难。当然修改源码也是可以的，而且还能做成一个通用方案，不过相当耗时。问题是没必要，整个项目就一处需要这样干，我们尽可能选择效率最高的那种方案。","link":"/posts/45548.html"},{"title":"微信分享没图片的可能原因","text":"微信关键词屏蔽规则 问题描述 调用微信公众平台的分享接口,自己分享的只有自己能看见图片别人看不见（效果示例） 可能的原因 红包和领取这两个词不能同时出现,红包中间加空格,标点符号都不行“双11”关键字，分享内容的标题和内容不能包含此关键词 传进微信接口的参数title desc 里边不能包含微信屏蔽规则中的关键词 forexample : 12{title: \"双11购物狂欢节人品大爆发\", desc: \"@你，双11人品爆发这是没谁了！\"}","link":"/posts/2192.html"},{"title":"大批量数据导出/前端导出数据实践","text":"场景我们PHP程序员在整个工作流程中，难免要和CRM/ERP之类的系统打交道。数据表格导出是在常见不过的功能模块。在数据量比较小的时候，我们可以随便搞，直接设置header头，输出csv也是可以的。但是当数据量上来的时候，我们会面临但不局限于以下问题： 1.php脚本执行超时； 2.可用内存不足； 3.nginx超时。 解决方案所以很自然的想到，那能不能把文件下载/导出/保存这个动作放到前端来执行呢，这样还可以节省服务器资源。我觉得这是个不错的主意。先上代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071//依赖的JS工具库//github https://github.com/sheetjs/sheetjs&lt;script src=\"https://unpkg.com/xlsx/dist/xlsx.full.min.js\"&gt;&lt;/script&gt;exportData() { //dialog控制开关 this.dialogVisible = true; /* original data */ let date = new Date(); let filename = date.getFullYear() + '' + (date.getMonth() + 1) + '' + date.getDate() + \"列表.xlsx\"; let insertData = []; let header = [ '用户id', '手机号', '姓名' ]; insertData.push(header); //在vue里为了不影响数据做一下深拷贝 let tmpData = JSON.stringify(this.$data); let tmpParamObj = JSON.parse(tmpData); let totalPage = this.total_page; let totalCount = this.total_count; const that = this; for (let i = 1;i&lt;=totalPage;i++) { tmpParamObj.current_page = i; //去掉没用的数据 tmpParamObj.list = []; tmpParamObj.pagination = []; $.ajax({ url: '/demo/demo/demo/getList', method: 'POST', data: {'_token': '{{csrf_token()}}', data: tmpParamObj}, success: function (data) { console.log(data); if (data.status == 'success') { data.data.forEach((item, index) =&gt; { let tmp = []; tmp.push(item.PassportID); tmp.push(item.MobileNumber); tmp.push(item.RealName); insertData.push(tmp); }); //记录下载进度更新到dialog上的下载进度条 let percent = Number.parseInt((insertData.length - 1) / totalCount * 100); console.log(percent); that.download_percent = percent; if (percent === 100) { let ws_name = \"SheetJS\"; let wb = XLSX.utils.book_new(); let ws = XLSX.utils.aoa_to_sheet(insertData); // /* add worksheet to workbook */ XLSX.utils.book_append_sheet(wb, ws, ws_name); console.log('【开始下载】' + new Date()); XLSX.writeFile(wb, filename); console.log('【下载完成】' + new Date()); that.dialogVisible = false; } } else { layer.msg('请求失败', {icon: 2}); } }, dataType: 'json', error: function () { layer.msg('网络异常', {icon: 2}, function () { layer.closeAll(); }); } }); } } 循环的按照页码去请求数据，直到拿到所有的数据。然后一并保存。理论上可以不担心数据的体量。新技能Get。","link":"/posts/33698.html"},{"title":"慎用array_filter函数","text":"array_filter(PHP 4 &gt;= 4.0.6, PHP 5, PHP 7) array_filter — 用回调函数过滤数组中的单元 说明 array array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) 依次将 array 数组中的每个值传递到 callback 函数。如果 callback 函数返回 true，则 array 数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。 参数 array 要循环的数组 callback 使用的回调函数 如果没有提供 callback 函数， 将删除 array 中所有等值为 FALSE 的条目。更多信息见转换为布尔值。 flag 决定callback接收的参数形式: ARRAY_FILTER_USE_KEY - callback接受键名作为的唯一参数 ARRAY_FILTER_USE_BOTH - callback同时接受键名和键值 返回值 返回过滤后的数组。 array_filter其实是一个相当好用的函数，常用的场景包括，表单多条件筛选，可以直接用此函数过滤掉没有值的筛选项。 但是有一个问题，必须要重视： array_filter会过滤掉任何值等于FALSE的值，也就是说 0值，空字符串，null，都会被过滤当你的筛选项里有值等于0时，问题就会暴露出来，在我们的项目里，在调接口时做了过滤，没想到有一个默认的状态等于0的参数被我过滤掉了，就造成了线上数据的失常，也算是一个比较低级的错误了。此文谨记。","link":"/posts/43176.html"},{"title":"本地服务CURL请求本地另一个服务API返回超时/或无返回","text":"入职之后一直在忙，终于有时间整理一波最近踩到的坑。 起因： 项目是微服务架构，一个项目对外提供API，新的项目调用API获得数据。于是就在本地搭建了两个服务。配置了两个虚拟域名，指向两个项目，当然我本地是windows+nginx。意外就在这个时候发生了，我在新开发的项目中，调用另一个项目的API时，总是CURL超时，如果CURL不设置超时的话就会造成NGINX卡死。百思不得其解。 问题成因： 后来了解到原来PHP+NGINX在windows下是不支持并发的？参考文章在这里这个我并不敢十分的肯定，我只是觉得能理解这个东西，我们看nginx的配置文件的话，会更清楚一些，到底发生了什么： fastcgi_pass 都绑定了9000端口 所以两个服务就会有一个端口被占用，无法返回消息。 解决方案： 第一是要把服务绑定到其他没被占用的端口，比如9009然后切换到php-cgi所在的目录，再单独启动一个php-cgi进程，去监听这个个端口 1php-chi.exe -b 127.0.0.1:9009 好的，完美解决。","link":"/posts/49088.html"},{"title":"根据身份证获取所在省份对照表","text":"12345678910111213141516171819202122232425262728293031323334353637$province = [ 11 =&gt; '北京', 12 =&gt; '天津', 13 =&gt; '河北', 14 =&gt; '山西', 15 =&gt; '内蒙古', 21 =&gt; '辽宁', 22 =&gt; '吉林', 23 =&gt; '黑龙江', 31 =&gt; '上海', 32 =&gt; '江苏', 33 =&gt; '浙江', 34 =&gt; '安徽', 35 =&gt; '福建', 36 =&gt; '江西', 37 =&gt; '山东', 41 =&gt; '河南', 42 =&gt; '湖北', 43 =&gt; '湖南', 44 =&gt; '广东', 45 =&gt; '广西', 46 =&gt; '海南', 50 =&gt; '重庆', 51 =&gt; '四川', 52 =&gt; '贵州', 53 =&gt; '云南', 54 =&gt; '西藏', 61 =&gt; '陕西', 62 =&gt; '甘肃', 63 =&gt; '青海', 64 =&gt; '宁夏', 65 =&gt; '新疆', 71 =&gt; '台湾', 81 =&gt; '香港', 82 =&gt; '澳门' ]; 如果你在laravel框架里，不妨在helper文件里写1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//从身份证里取所在地区if (!function_exists('get_province_by_card')) { function get_province_by_card($card = '') { if (!empty($card)) { $province = [ 11 =&gt; '北京', 12 =&gt; '天津', 13 =&gt; '河北', 14 =&gt; '山西', 15 =&gt; '内蒙古', 21 =&gt; '辽宁', 22 =&gt; '吉林', 23 =&gt; '黑龙江', 31 =&gt; '上海', 32 =&gt; '江苏', 33 =&gt; '浙江', 34 =&gt; '安徽', 35 =&gt; '福建', 36 =&gt; '江西', 37 =&gt; '山东', 41 =&gt; '河南', 42 =&gt; '湖北', 43 =&gt; '湖南', 44 =&gt; '广东', 45 =&gt; '广西', 46 =&gt; '海南', 50 =&gt; '重庆', 51 =&gt; '四川', 52 =&gt; '贵州', 53 =&gt; '云南', 54 =&gt; '西藏', 61 =&gt; '陕西', 62 =&gt; '甘肃', 63 =&gt; '青海', 64 =&gt; '宁夏', 65 =&gt; '新疆', 71 =&gt; '台湾', 81 =&gt; '香港', 82 =&gt; '澳门' ]; return array_get($province, substr($card, 0, 2), ''); } return $card; }}","link":"/posts/46867.html"},{"title":"记录一个微信网页授权中不小心踩到的坑（Curl请求返回false）","text":"这个问题是file_get_contents不能获取https的内容引起的。这样的情况下，我们一般会采用curl拓展来模拟请求。 代码demo（当然这是错误的示范）：123456789function get_url_content($url){ $ch=curl_init(); curl_setopt($ch,CURLOPT_URL,$url); curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,false); curl_setopt($ch,CURLOPT_SSL_VERIFYHOST,false); curl_setopt($ch,CURLOPT_RETURNTRANSFER,1); $result=curl_exec($ch); return $result;} 但是这个代码中有些问题，假如我们想访问https的内容的话，我们必须开启这两项验证12CURLOPT_SSL_VERIFYPEERCURLOPT_SSL_VERIFYHOST 123456789function get_url_content($url){ $ch=curl_init(); curl_setopt($ch,CURLOPT_URL,$url); curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,true); curl_setopt($ch,CURLOPT_SSL_VERIFYHOST,true); curl_setopt($ch,CURLOPT_RETURNTRANSFER,1); $result=curl_exec($ch); return $result;} 但是在获取用户信息的时候,Curl请求总是返回false，检查参数，什么都没错，为什么会返回false呢，最后实在想不通。 so 看到了这篇文章 php curl返回false填坑记-curl调用微信创建自定义菜单返回false1$url = ' https://api.weixin.qq.com/cgi-bin/menu/create?access_token='.$accessToken; 回头去检查我的代码，哎哟卧槽，还真是。就像那篇文章的大哥说的那样 总结：使用curl来请求数据时curl的url地址中的任何地方不能有空格存在，不然会返回一个你琢磨不透的false","link":"/posts/40635.html"},{"title":"2018年终总结","text":"2018年终总结 How time flies 很快，再过一个工作日就又到元旦假期了，这意味着2018年已经走完了。回头看看过去这一年，真的是相当的魔幻啊！ 工作 2017年的9月份，入职了搜狐畅游移动互联事业部旗下的蜂群工作室，这是我的第一份工作。这份工作很棒，在这里，我第一次体验了整个完成的开发流程和开发规范，积累了宝贵的工作经验，当然还遇到了一大波很有趣的人。 老毕: 蜂群工作室的项目负责人，很NICE的一个领导，面试的时候问：你一个人住么？我说是的，然后老毕说那可不行啊，我们公司都是有家室的人，你过来了也给你配一个，啊哈哈哈，我内心想的是，还有配一个这样的骚操作么？印象最深的是，得知外派员工春节期间不能像畅游本部员工那样享有三天的探亲假之后，老毕找到我说：没关系，我们可以团队内部实现一下，你申请外出就好了。哇，可以说是相当的感动了。 小夏哥： 小夏哥，这算是我的老师了，我的直属leader，是我们的技术负责人，小夏哥是一个很好的人，他的技术全是自学的，这个人精神毅力简直强到可怕，一直在学习，总是看到他再看一些机器学习的东西。在日常的工作中，小夏哥总是很维护我们的技术团队，包括周会复盘上出现的问题，我们有问题解决问题就行了，不要去苛责技术人员的责任，每个人都会犯错。尤其是在有任务给我的时候，小夏哥会额外的给我开一个小会，帮我分析一下业务流程，把每一步都给我解析的很彻底，建什么表，流程该怎么走都说的很清楚，相当的感动，这个人真的很棒。在我的第一份工作中有这样一个指路人，很幸运。 璐瑶： 这个是我们的产品经理，说实话我一开始并不怎么喜欢这个产品经理，因为她给人的感觉很不好惹，经常把实习生的小产品训的一文不值。但是我之所以也会说这个人，是因为这个人其实是刀子嘴，豆腐心，很善良的一个人。我妈在12月份的时候住院了，我突闻这个消息，着急的差点飙泪，要请假回家。璐瑶安慰我不要着急，还把请假的过程都省去了，说她会帮我处理好，平时谁感冒的时候，她也很关心，还会拿出很多自己的药给我们吃。特别是最后，我们部门要解散了，本来外派员工，直接就脱离了，但是她为我们多争取了15天的缓冲期，我觉得真的是相当的棒了，自己团队的人不能吃一点亏。 当然，还有一些其他人，就不再一一提起： Thanks for you : 号称女装双雄的测试同学：彬彬&amp;&amp;初锐，这两个同学在年会的时候变身朱碧石，骚断腿。 天然呆的小产品：赖云 ， 呆萌呆萌的小产品，哦哦哦，这个样子是日常。 还有热心帮我查代码的姐姐：薇薇姐 一言不和就自己动手帮我查代码中的问题。 还有好为人师的：强哥 强哥这个怎么搞？强哥，你看这个？强哥？ 最后还有瞬间爆炸的设计师：王先生 王先生一言不和就和产品刚，分分钟爆炸给你看 。 畅游的故事畅游的故事最具代表性的，应该是年会事件了，我负责开发整个年会抽奖系统。在2000多号人的会场里边，进行到第一轮抽奖的时候表现的没有任何问题的抽奖系统在第二轮抽奖的时候抽奖名单突然白屏，真的是给我吓坏了，头皮一阵发麻。虽然还顶着如花的妆容，但是也要马上去check日志，看看到底出了什么问题。我擦，这是个什么问题？强哥？你见过这个问题么？强哥往边上一闪，没，没有。嘤嘤嘤，好想哭，这个错误定位不到啊。台上的表演还有5分钟就结束了，这个问题要在下一轮抽奖之前解决。好紧张，好刺激。查看一下数据库，看一下写入的中奖信息，卧槽，数据居然还在变化，马上想到应该是第一轮中奖之后的微信消息推送接口执行时间过长，导致脚本超时了,但是这个进程还在。所以数据还在变化。得益于出发去年会现场之前小夏哥的提醒，补充过一个重新推送没有推送成功中奖信息的脚本，所以果断做决定，告诉配合我的前端，中奖之后不再调用推送消息接口，改为抽奖结束后脚本推送。然后提醒吊胆的等着主持人上午抽下一轮的奖，OK，完全没有问题，完美。 畅游&amp;&amp;诸葛找房 在小夏哥的指引下，我学到了挺多东西。虽然我也希望能继续在畅游呆下去，但是我们部门的盈利能力不行，不再继续孵化了，CEO的决策终结了我们部门的命运。2018年5月份的时候，我离开了畅游，挺不舍的。但是离开未偿不是一个新的开始，祝各位安好吧。 一个月后从家中归来的我，入职了诸葛找房，一家以聚合房屋信息为主要业务线的B轮创业公司，其实诸葛很好，不论是上班时间还是福利待遇都相当的不错。早上10-10.30才上班，一日三餐都包管,每月还有1K的房补。虽然是一周单休一周双休，但是不论从工作环境还是企业文化上来讲都是比较舒适的，但是两个多月后，我还是离开了这家公司。现在想起来其实是有点任性的，但是我觉得那种环境会让我对技术产生怀疑，公司内部的技术团队之间怎么说呢，会互相嘲讽，这真是让我感觉有点难以下咽。其二是，我当时的负责人，写的代码中居然有很多，再遍历中去查询的操作，这令我十分的惊奇。这种操作，除了新手基本没有人会干这种事情。客户端反馈接口响应比较慢，他去优化，然而你们猜猜看他干了什么事情，他这次是不去遍历中查询mysql了，但是他去遍历中查询redis。我有点想骂娘，明明可以通过构建合理的数据结构来完成这件事的。只要查询一次就好了。其三，诸葛的KPI考核机制，有员工会因为输出不够而被延迟转正说实话，我是第一次听说这种操作，当然，这件事发生在普通员工身上还比较能理解，可是连我们的部门VP身上也发生了这种事情，那我就不得不考虑我接下来的转正事宜了。斟酌再三，还是跟HR谈了离职。 后续 从诸葛离职之后，又投了新的公司，期间只面试了两家：360和和信贷。 在和信贷的面试经历还是很有意思的，谈技术的时候，我的面试官说，你写的慢一些，你别光快了，那不对。你说的是对的，写出来的不太对。这让我想起一个关于面试的段子： 面试官问应聘者：你有什么特长么？ 应聘者：我心算特别快。 面试官：好那你算一下1687899*84651315等于多少？ 应聘者：等于488884546。 面试官：你这不对啊？ 应聘者：你别管对不对，你就说快不快吧？ 哈哈哈哈哈哈，好了，我们接着往下说： 技术面完之后，面试官说帮我喊一下HR，HR就和我简单聊了聊，然后说让我先回去，CTO今天上午不在，没办法复试。我出门的时候又碰到面试官，面试官说：诶？你这是准备回去了么？我不是帮你喊了HR了么？什么情况啊，你先别着急走？我帮你问一下。这个动作，让我特别暖心，哈哈哈，我是不是太容易被感动了。反正当时就觉得这个面试官，也就是我的leader人好好哦。看样子面试应该是通过的。可以考虑这一家。 下午的时候又去360面试： 说实话，360我内心还是比较向往的，毕竟是第二梯队的大厂，而且我对360并不排斥，我甚至还用过360的手机，这要是有机会去360工作，可以说是棒棒哒。然而在我通过了两轮技术面试之后，HR过来找我谈，说由于我毕业院校和工作经验的问题，给了我否定的答案。据称是，我2017年毕业，工作经验又不足。相对来说还是社招的人或许潜力更大一些。我：emmmm，那好吧，以后有机会再一起共事吧。 最后还是入职了和信贷。 和信贷的技术团队也很棒，技术leader也在推进新技术，很符合我的成长路线，团队也很年轻。这很好，一个新的篇章。未来，我来了。。。 关于未来 2018的故事就此告一段落，未来的故事，就让2019去抒写吧","link":"/posts/60263.html"},{"title":"两个比较好用的mysql函数","text":"我们经常会面临要从数据库里**判断时间，取出特定日期的查询。但是数据库里储存的都是unix时间戳，处理起来并不是特别友好。幸而MYSQL提供了几个处理时间戳的函数，可以帮助我们在查询的时候，就将时间戳格式化。用法举例如下：1.FROM_UNIXTIME()函数 FROM_UNIXTIME(unix_timestamp,format) 参数unix_timestamp 时间戳 可以用数据库里的存储时间数据的字段 参数format 要转化的格式 比如“”%Y-%m-%d“” 这样格式化之后的时间就是 2017-11-30 可以有的形式： %M 月名字(January～December) %W 星期名字(Sunday～Saturday) %D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。） %Y 年, 数字, 4 位 %y 年, 数字, 2 位 %a 缩写的星期名字(Sun～Sat) %d 月份中的天数, 数字(00～31) %e 月份中的天数, 数字(0～31) %m 月, 数字(01～12) %c 月, 数字(1～12) %b 缩写的月份名字(Jan～Dec) %j 一年中的天数(001～366) %H 小时(00～23) %k 小时(0～23) %h 小时(01～12) %I 小时(01～12) %l 小时(1～12) %i 分钟, 数字(00～59) %r 时间,12 小时(hh:mm:ss [AP]M) %T 时间,24 小时(hh:mm:ss) %S 秒(00～59) %s 秒(00～59) %p AM或PM %w 一个星期中的天数(0=Sunday ～6=Saturday ） %U 星期(0～52), 这里星期天是星期的第一天 %u 星期(0～52), 这里星期一是星期的第一天 %% 一个文字% 使用举例：123456789SELECTusername,FROM_UNIXTIME(create_time, &quot;%Y-%m-%d&quot;) AS datFROM`wp_user`GROUP BY dat 这样就能查出每天有哪些用户注册了。按天分组，你可以将数据导出后进行其他操作。 2.UNIX_TIMESTAMP（） UNIX_TIMESTAMP(date) 其中date可以是一个DATE字符串，一个DATETIME字符串，一个TIMESTAMP或者一个当地时间的YYMMDD或YYYMMDD格式的数字 用这个函数可以帮助我们在时间戳中筛选出某些天的数据。 比如说：1234567891011SELECTusername,FROM_UNIXTIME(create_time, &quot;%Y-%m-%d&quot;) AS datFROM`wp_user`WHEREcreate_time &gt;=UNIX_TIMESTAMP(&apos;&apos;2017-11-29&apos;)ANDcreate_time &lt;UNIX_TIMESTAMP(&apos;&apos;2017-11-30&apos;)GROUP BY dat 这个查询可以让我们查出29号那一天的用户注册记录。 善用这两个MYSQL函数可以帮助我们提高处理数据的效率。","link":"/posts/43658.html"},{"title":"微信支付秘钥绝对路径问题","text":"如果你使用了微信的官方SDK，那我想其实你很容易发现这个问题 在微信官方PHPSDK中WxPay.Api.php这个文件中，微信支付秘钥这里的路径写的是相对路径 这样这样 点开路径之后我们看到的是这样这样： 然而我们在生产环境的时候，微信要求这个路径为绝对路径，所以我们需要对WxPay.Api.php文件的以下两行内容做修改，改成绝对路径。","link":"/posts/19527.html"},{"title":"用PHP自带函数对二维数组进行排序","text":"经常会面临这样的需求，虽然有时候我们可以在数据库查询的时候，直接对数据进行排序，但还是无法满足日益复杂的业务需求。 这里边会用到两个函数 一个是array_column()函数，这个函数是从二维数组中抽出一个键的值，作为一个新的数组返回。 另一个是array_multisort()函数，这个函数是一个排序函数，它会依照第一个参数数组的排序规则，依照第一个参数数组的值在第三个参数重的位置对第三个参数进行排序。 听不明白吧？听不明白就对了，还是直接看代码来的实在：123456789101112131415161718192021222324252627282930313233343536373839$orgin = array( array( 'id' =&gt; 5698, 'first_name' =&gt; 'Bill', 'last_name' =&gt; 'Gates', ), array( 'id' =&gt; 4767, 'first_name' =&gt; 'Steve', 'last_name' =&gt; 'Jobs', ), array( 'id' =&gt; 3809, 'first_name' =&gt; 'Mark', 'last_name' =&gt; 'Zuckerberg', )); $idArr = array_column($orgin, 'id');array_multisort($idArr,SORT_ASC,$orgin);var_dump($orgin);// 这个打印的结果是：array (size=3) 0 =&gt; array (size=3) 'id' =&gt; int 3809 'first_name' =&gt; string 'Mark' (length=4) 'last_name' =&gt; string 'Zuckerberg' (length=10) 1 =&gt; array (size=3) 'id' =&gt; int 4767 'first_name' =&gt; string 'Steve' (length=5) 'last_name' =&gt; string 'Jobs' (length=4) 2 =&gt; array (size=3) 'id' =&gt; int 5698 'first_name' =&gt; string 'Bill' (length=4) 'last_name' =&gt; string 'Gates' (length=5) 这样是不是就清楚的多了？","link":"/posts/20637.html"},{"title":"记一个微信支付-1错误JSAPI缺少参数app|get_brand_request:Fail","text":"最近公司要做一个H5小游戏里边涉及到微信公众号支付，中间摸爬滚打遇到了很多坑。记录一下，留待后人看。 我们来看一下这个方法 GetJsApiParameters 怎么样，看起来像不像输出了一个JSON字符串作为微信支付JSAPI的参数？ 但是如果你传了字符串进去，那不好意思，一准报错，我们必须在前端把这个json字符串对象化。但是你以为这就完了么？不存在的。 我们的前端有一个公共的方法，会把JSON字符串转为JSON对象，但是传进去给这个微信的callpay方法，它都会自动的变成字符串（当然这也可能和我们前端框架有关系），我们试了各种方案，最后发现，不管你的数据类型是什么，在微信的jsApiCall()这个方法中，都对数据进行一下JSON.parse是最妥当的。————————————————–分割线———————————————————– 单纯的我以为这就完了，然而并没有，再后来我们发现这样也依旧会偶尔出现唤不起微信支付的情况，所以后来我们是 这么干的，尽管看起来什么也没做，但这样就是好使。如果你也遇到了同样的问题，建议你也试试这种解决方案。","link":"/posts/18842.html"},{"title":"论好的代码习惯的养成/做一个优雅的coder","text":"1.先说一下以前被滴滴大佬教育的事情： 以前写代码的时候，因为只需要取特定的几个字段，所以经常这么写12345678//Request $request for example$parameters = $request-&gt;all();$data['name'] = $parameters['name'];$data['email'] = $parameters['email'];$data['tel'] = $parameters['tel'];$data['address'] = $parameters['address'];$data['birthday'] = $parameters['birthday'];$data['sex'] = $parameters['sex']; 后来，大佬说，事实上你可以这样写：1234567//Request $request $column = ['name','email','tel','address','sex','birthday'];$data = [];foreach ($column as $v) { $data[$v] = $request[$v];} emmmm，好像确实要精简一点哈。。。。 2.再说一下最近被老大@的事情 因为对字符串函数用的比较多，我下意识的会把数组解开处理，已经形成思维定式了，拿到东西优先转成自己最熟悉的那种形态，但实际上，完全没有这么麻烦，比如下边的代码： 其实完全可以这样：123//Request $request$search = $request-&gt;all();$data['query'] = http_build_query($search); 或者说，本来就应该这么写，有自带的函数可以完成这样的功能，我们就不要自己再造轮子了。（我是真的菜哈。。。）","link":"/posts/59946.html"}],"tags":[{"name":"Javascript","slug":"Javascript","link":"/tags/Javascript/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"CI","slug":"CI","link":"/tags/CI/"},{"name":"Sublime text3","slug":"Sublime-text3","link":"/tags/Sublime-text3/"},{"name":"cmder","slug":"cmder","link":"/tags/cmder/"},{"name":"laydate","slug":"laydate","link":"/tags/laydate/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"layui","slug":"layui","link":"/tags/layui/"},{"name":"layer","slug":"layer","link":"/tags/layer/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"wordpress","slug":"wordpress","link":"/tags/wordpress/"},{"name":"fun","slug":"fun","link":"/tags/fun/"},{"name":"vagrant","slug":"vagrant","link":"/tags/vagrant/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"abbrlink","slug":"abbrlink","link":"/tags/abbrlink/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"微信","slug":"微信","link":"/tags/微信/"},{"name":"数据导出","slug":"数据导出","link":"/tags/数据导出/"},{"name":"数组筛选","slug":"数组筛选","link":"/tags/数组筛选/"},{"name":"Curl","slug":"Curl","link":"/tags/Curl/"},{"name":"身份证号","slug":"身份证号","link":"/tags/身份证号/"},{"name":"微信开发","slug":"微信开发","link":"/tags/微信开发/"},{"name":"年终总结","slug":"年终总结","link":"/tags/年终总结/"},{"name":"微信支付","slug":"微信支付","link":"/tags/微信支付/"},{"name":"数组排序","slug":"数组排序","link":"/tags/数组排序/"},{"name":"优雅","slug":"优雅","link":"/tags/优雅/"}],"categories":[{"name":"有点意思","slug":"有点意思","link":"/categories/有点意思/"},{"name":"爬坑日常","slug":"爬坑日常","link":"/categories/爬坑日常/"},{"name":"厚积薄发","slug":"厚积薄发","link":"/categories/厚积薄发/"},{"name":"关于我","slug":"关于我","link":"/categories/关于我/"}]}