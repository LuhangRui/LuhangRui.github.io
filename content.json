{"pages":[{"title":"about","text":"关于我 现就业于北京。 一个从网络营销专业转行来写PHP的逗比。 日常工作就是制造BUG。 近期动向 努力的干VUE来着，希望自己能成为一个伪全栈的大佬。 公司最近的后端技术栈可能要改成node了，有学习计划。 联系方式 QQ ：假装这里有联系方式。","link":"/about/index.html"}],"posts":[{"title":"50行代码写的一个插件，破解一个H5小游戏","text":"小游戏链接：测测你的眼睛对色差的辨识度http://www.webhek.com/post/color-test.html?from=timeline 废话不多说，先放代码：12345678910111213141516171819202122232425262728293031323334353637383940window.onload = function () { console.log(\"点击开始测试-------\"); //点击开始按钮 var play = document.getElementsByClassName('play-btn'); play[0].click(); //获取画布盒子 // sleep(1); var box = document.getElementById('box'); var num = box.children.length; console.log('共有'+ num + '个字元素'); //把第一个元素定义为基础色 var color = []; var basecolor = box.children[0].style.backgroundColor; console.log(basecolor); //循环 function clickButton() { console.log('下一关'); box = document.getElementById('box'); num = box.children.length; color = []; basecolor = box.children[0].style.backgroundColor; // console.log('进入下一关'); for (var i = 1; i &lt; num ; i++) { color[i] = box.children[i].style.backgroundColor; } for (var i = num-1; i &gt;0 ; i--) { if (color[i]!=basecolor &amp;&amp; color[i-1] ==basecolor) { box.children[i].click(); console.log(\"点击第\"+(i+1)+'个元素'); } else if (color[i]!=basecolor &amp;&amp; color[i-1] !=basecolor) { box.children[0].click(); console.log(\"点击第\"+1+'个元素'); } } } setInterval(clickButton,300); } 游戏界面： 思路都在代码里了，就是取到全部的色块元素，拿CSS对比，找到不一样那个，JS点击，进入下一关。当然，代码写的很粗糙，还有改进的空间。轻喷。 说一下流程： 首先呢，我们要把JS代码注入到游戏页面中，这个我是通过把代码打包成浏览器插件实现的。我做的谷歌浏览器的插件，当然你也可以做360的，火狐的，等等。 具体不同浏览器的插件的方法，你可以通过百度，在CSDN上找到对应的文章。 如果有人想试一下的话，可以下载这个谷歌浏览器的插件： 链接: https://pan.baidu.com/s/1yASkGKcrz1pPt0vY6gxqeg 提取码: jvcu 插件安装方法： 解压文件到一个好找的文件夹，然后 谷歌浏览器-》设置-》更多工具-》拓展程序-》开发者模式打开-》加载已解压的插件。 插件使用： 打开游戏界面，，插件就会自动运行，如果出问题的话，就多刷新几次。 放在最后： 体验几次之后就把插件移除吧，代码写的不完善，插件会在每个页面都运行，而JS里有一个定时器，因而可能会拖累浏览器的速度。","link":"/posts/40280.html"},{"title":"CI框架对HTML输入的处理/CI框架引用ueditor时对提交内容的默认处理","text":"项目里近期用到了富文本编辑器，可是写入数据的时候总是写入， 1&lt;p xss=\"removed\"&gt;内容&lt;/p&gt; 所有的样式都会被改写成这样，xss=&quot;removed&quot;，造成前端展示的时候没有任何样式，排查的过程中一度以为是百度的富文本编辑器对输入的数据进行了处理，不过在进行排查的过程中，我用官方的demo提交到一个php文件做测试的时候发现，接受到的数据并没有问题。 所以想到框架中接受数据用的是CI框架封装的1$this-&gt;input-&gt;post(null,true); 并不是原生的 $_POST 有可能是这里有问题，很容易就想到，是框架本身都输入的内容做了防XSS攻击的处理。 以上。","link":"/posts/23321.html"},{"title":"Sublime text3中文版 无法安装插件There are no packages available for installation问题的解决","text":"说起来差点没被气死，我当时的情况已经是要疯了，连他们的域名都ping不通，我还想着，咋地，要倒闭了？ 首选项-》插件设置-》Package Control-》默认 里边的这个配置项 https://sublime.wbond.net/channel.json 这个地址我在浏览器都无法访问，ping这个域名都超时（后来被证明可能是网速的原因，有时候能访问得到有时候访问不到）。 可是我不明白的是，官方的这个配置为什么不能直接用，还需要用户自行进行配置，感觉有毒啊。 好了，不废话了，直接说解决方案： 1.下载 https://packagecontrol.io/channel_v3.json 随便放在什么目录里，php程序员的话，我觉得我们可以这么搞: 1file_put_contents('channel_v3.json',file_get_contents(\"https://packagecontrol.io/channel_v3.json\")); 在sublime里直接ctrol+b运行，直接下载了，是不是很棒？哈哈哈 2.打开这个文件，修改”schema_version”: “ 3.0.0” 为 “schema_version”:” 2.0” 3.路径：首选项-》插件设置-》Package Control-》默认 修改此配置123\"channels\": [ \"https://sublime.wbond.net/channel.json\" ], 改为：123\"channels\": [ \"D:/Program File/phpstudy/PHPTutorial/WWW/test/channel_v3.json\" ], 好了，大功告成。至于这么做的原理，参见这位老哥的文章，不过这个老哥好像发了一篇博文之后再没有更新了，本来也想直接转载的，但是怕是等不到作者回我了，还是自己写一遍吧。 文章地址在这里 参考文章","link":"/posts/30182.html"},{"title":"laydate V5.0.8动态设置min值","text":"laydate通过设置min,max值来对用户输入的时间做约束 laydate v1.0版本 12345678910111213141516171819202122232425262728//日期插件 var start={ elem:\"#start\", format:\"YYYY-MM-DD hh:mm:ss\", min:\"2013-08-18 00:00:00\", max:\"2099-06-16 23:59:59\", istime:true, istoday:true, choose:function(a){ end.min=a; end.start=a } }; var end={ elem:\"#end\", format:\"YYYY-MM-DD hh:mm:ss\", min:\"2013-08-18 00:00:00\", max:\"2099-06-16 23:59:59\", istime:true, istoday:true, choose:function(a){ start.max=a } }; laydate(start); laydate(end);//只要在回调函数choose中赋值就行了 laydate v5.0版本 12345678910111213141516171819202122232425262728//日期插件 var start=laydate.render({ elem:\"#start_time\", type:\"datetime\", format:\"yyyy-MM-dd HH:mm:ss\", min:\"2013-08-18\", max:\"2099-06-16\", done:function(value,date){ end.config.min={ year: date.year, month: date.month-1, date: date.date, hours: date.hours, minutes: date.minutes, seconds: date.seconds }; } }); var end =laydate.render({ elem:\"#end_time\", type:\"datetime\", format:\"yyyy-MM-dd HH:mm:ss\", min:\"2013-08-18\", max:\"2099-06-16\", done:function(a){ // start.max=a } }); 在v5.0版本中，min值变成了一个对象，并不会重新渲染，所以直接对min设置值是没有用的，得单独对每个min的子元素赋值 特别要注意的是month要减1 虽然我也并不清楚为什么要这么做，但是It works. 我已经去layui的社区问了，希望能有人帮我解惑。","link":"/posts/55229.html"},{"title":"cmder的segmentation fault错误修复","text":"Segmentation fault 现场还原 问题出现的原因是我在 cmder的命令行里执行了cmder /register ALL命令，本意是把cmder放到右键菜单里去的但我没想到的是，各种不成功，提示cmder lanchun什么的，之后，我换在了windows自带的cmd中执行这个命令，成功了。但是令人疑惑的是cmder的bash窗口就此开始抽疯，cd 命令可以使用 ll、ls之类的命令直接抛出Segmentation fault错误。 实验过程&amp;&amp;猜想 百度搜了很久并没有找到解决方案，百度提到可能的原因： git bash 版本过旧，有概率出现这个问题，但是升级之后并没有解决这个问题 猜想可能的原因： Cmder full这个版本是有BUG的，我们看Cmder的设置的时候，可以发现他的GUI其实是ConEmu，然后又拿这个调用了git bash ，那我们直接拿ConEmu调用git bash会不会有问题呢，所以我们打开ConEmu执行命令cd git/bin &amp;&amp; bash --login -i 我们发现我们这时候进入bash 界面了，我们使用一下ll命令，哎，这次没有报错了。 我们换Cmder mini 试一下，打开bash:bash窗口，卧槽，啥玩意，居然说系统找不到制定路径，好的，我们从设置里看一下，执行bash窗口之后执行的哪个命令，可以看到是cmd /c &quot;&quot;%ConEmuDir%\\..\\git-for-windows\\bin\\bash&quot; --login -i&quot; ,我们打开安装目录，看一下，我去！ConEmuDir 的上级根本没有git-for-windows目录，好吧，你赢了，而在full版本中是有的！！！ 我后来找到我git-bash的安装目录，复制整个文件夹到cmder的Vender 目录，改名成git-for-windows,打开bash:bash窗口，哎，进来了，运行命令试试，好的，Surprise ! 这次没有报错。问题成功解决。 结论 结论就是 Cmder full 的版本在Windows10下，可能有某种未知的Bug , 我们可以通过尝试使用给 Cmder mini 添加git-bash的办法，来代替它。","link":"/posts/57887.html"},{"title":"layer.js错误Uncaught TypeError: i is not a function","text":"最初是要写一个管理后台来着，项目中需要用到弹出层，但是没有前端配合，我一个小PHP需要去写这玩意，怎么办呢？查了一些资料，发现layer对我来说还行，文档写的也比较完全，学习成本不高，就下决心用这个了。但是现实总是会给你泼冷水，刚引入就报了一个莫名其妙的错误。 呐，就是这个，我自己一个人在那里纳闷，卧槽，我啥也没做啊，我只是引入进来怎么还报错了呢？ 我还心想着，这个layer.js也已经被很多人用了，不太可能是这个插件的问题吧。我就把引入的js文件一个一个的注释掉，开始排查，后来发现，单独引入layer，或者单独引入JQuery都是没有问题的，但是同时引入的话，就会报错，我也有点懵逼了，什么鬼，这两个js冲突了？后来突然想到，马丹，layer.js是依赖于JQ的。后记：其实以上问题都是不仔细看别人的文档造成的。 来自layer.js官网的说明：","link":"/posts/32812.html"},{"title":"layer快速点击会触发多次回调","text":"场景还原 测试同学反馈点击了一次操作，为什么会有两条操作记录？ 我：？？？？ 排查思路 查看日志，看一下是不是发了两次请求，果不其然啊： 并发了，同一时间发送了两次请求，出现了脏写。 原因 系统的confirm是线程阻塞的，而layer.confirm是非阻塞的，这一点在官方的API文档中有提到。 解决方案 12345678910var lock = false;layer.confirm('is not?',{btn:['确定','取消']},function(index){ if(!lock) { //加锁防止多次回调 lock =true; $.ajax({ // ..... }) }})","link":"/posts/23580.html"},{"title":"一个有趣的BUG","text":"一个很有意思的Bug 某天测试同学再次向我反馈，你这个删除按钮虽然置灰了，但是还是可以点击啊？ 我：？？？？（黑人问号） 卧槽？不可能啊，按钮都disabled了，怎么还可以点击？还能触发click事件？开玩笑的吧？，匆忙应付了测试同学开始复现这个Bug. 复现 重新写了个页面demo，开始测试，卧槽？复现不了啊，这尼玛。。。。？ 叮！事情の真相 没办法复现很烦啊，什么鬼？遂去原页面检查，然后发现了这样一段代码： 123456789&lt;div class=\"btn-cancel\"&gt; &lt;button disabled&gt;删除&lt;/button&gt;&lt;/div&gt;&lt;script&gt;$(\".btn-cancel\").click(function(){ //业务逻辑....})&lt;/script&gt; 卧槽，点击事件居然是绑定在div上的，由于button在div内部并且是disabled，button处于不可点击的状态，所以测试同学点击到的其实是div!!! 真的是十分的有意思了。Funny!","link":"/posts/25776.html"},{"title":"使用vagrant一键部署本地php开发环境（二）制作自己的vagrant box","text":"在上篇的基础上 ，我们已经安装好了virtualbox和vagrant，没有安装的话，参照上篇 使用vagrant一键部署本地php开发环境（一） 1.从网易镜像或阿里等等镜像下载Centos7http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1804.iso 2.打开virtualbox进行虚拟机安装——————具体步骤自己百度，没什么难的。 3.虚拟机安装好之后1）以root用户登陆 登陆之后依次执行 adduser vagrant 和 passwd vagrant命令，创建vagrant用户密码也设置为vagrant。 为vagrant用户配置sudo免密权限：12chmod 0777 /etc/sudoersvim /etc/sudoers 依次执行这两个命令 在root行下新增vagrant用户，参照图片设置。完事esc :wq保存退出 执行chmod 0440 /etc/sudoers 恢复默认权限 2）配置ssh 执行 yum install openssh-server 如果没安装的话安装一下，如图是已经安装过的。 安装完毕之后执行 vim /etc/ssh/sshd_config 打开监听和端口，并把允许root用户远程登陆打开。 4.下载官方公钥配置 vagrant ssh1）. 下载官方公钥1wget https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub 2）. 重命名authorized_keys，移动到.ssh文件下 mv vagrant.pub .ssh/authorized_keys 3）. 修改authorized_keys文件权限 除了属主vagrant以外，group和其他用户都不可写 chmod go-w /home/vagrant/.ssh/authorized_keys 5.安装virtualbox增强工具，为共享目录做准备1).点击菜单中的 设备 &gt; 安装增强功能 2).切换到根目录创建cdrom目录 cd / &amp;&amp; mkdir cdrom &amp;&amp; mount /dev/cdrom /cdrom 3).切换到/cdrom并安装高级功能 cd /cdrom &amp;&amp; ./VBoxLinuxAdditions.run 4).安装完成关闭虚拟机 6.设置网络规则网卡1按照如下设置，端口转发规则2222-》22 网卡2设置： 7.打包制作box在本地主机的任意目录 执行1vagrant.exe package --base centos(virtualbox中显示的虚拟机的名称) --output centos-lnmp.box(你给box起的名字，随意)，该操作会在当前目录下生成 centos-lnmp.box 接下来你懂的。就又回到第一篇，如何使用box上了","link":"/posts/11255.html"},{"title":"使用vagrant一键部署本地php开发环境（一）","text":"一：我们为什么需要用这玩意我们在开发中经常会面临的问题：环境不一致，有人用Mac有人用Windos还有几个用linux的，而我们的服务器都是linux。在我本地是可以的啊，我测了都，没有问题啊，然后看着上线之后的500错误懵比。It works on my pc . 二：vagrant是什么东西Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它 使用Oracle的开源VirtualBox虚拟化系统，使用 Chef创建自动化虚拟环境。——————-来自百度百科。 直白的说是一键生成特定虚拟机的工具。详细的我们下边会说。 三：所需的软件：1、virtualBox可以到VirtualBox的官网进行下载：https://www.virtualbox.org/wiki/Downloads 2、vagrant可以到vagrant官网下载https://www.vagrantup.com/downloads.html 这个下载特别慢，这里放出百度云的链接 链接: https://pan.baidu.com/s/1Toy3SRRACOWa8g0ybUHD8Q 密码: puwm 3、vagrant box vagrant部署环境，需要一个box文件。如果在公司里面，可以从他们那里拷一个box文件安装。这样安装的环境与他们的开发环境是一致的。box文件也可以在网上下载。搜索：vagrantbox http://www.vagrantbox.es/ （备注：这个地址实际上是失效的，很多box文件都找不到资源了，不过不要紧，因为我们可以自己做一个box，这个在下一篇文章我会讲如何定制一个自己的box，顺道放一个我制作好的基于centos7且安装好lnmp1.5的box）链接: Centos-lnmp.box密码: tssp 四：工作流程 五：vagrant的日常使用下载以上vagrant和virtualbox之后，一路next安装，安装完成之后。 在任意位置新建一个文件夹，来管理你的box ，比如我们在D盘新建一个vagrant文件夹 1.把你下载的box文件扔进来，如图： 2.我们在这个位置打开git-bash，或者用cmd切换到这个目录，我们以git-bash为例： 1）执行1vagrant.exe box add centos centos-lnmp.box 该命令是给box起名并添加到box列表 需要注意的就是在cmd命令窗口下可以不用.exe 直接执行1vagrant box add {name(你要起的名字随意)} {url/file(本地文件地址或远程地址)} 2）执行命令1vagrant.exe init {centos(刚刚add操作时起的名字)} 就像这样，这个命令会初始化box并生成一个Vargrantfile的配置文件，在这个文件里我们可以 设置一些配置信息，比如共享主机目录到虚拟机目录，网络，虚拟机ip等信息。 打开配置文件 这些配置项默认都是注释掉的，我们需要找到这两行进行设置。其中共享目录的配置我们可以这样写，第一个参数为本地目录，第二个参数是虚拟机目录，/ 代表了虚拟机下的根目录。 通过共享目录设置，我们可以把我们的项目开发目录映射到虚拟机目录，通过虚拟机配置nginx，来让项目直接跑在虚拟机中。1config.vm.synced_folder &quot;D:/data&quot;, &quot;/vagrant_data&quot; 3）部署环境 执行命令1vagrant.exe up 就可以一键部署虚拟机环境了 4）虚拟机管理 执行命令 vagrant.exe ssh vagrant.exe ssh就能直接链接到虚拟机的系统了，目录已经挂载好了，接下来就是考验你linux操作能力的时候了，我们可以在这上边查看日志等等一系列事情。 备注:你也可以通过xshell来链接你的虚拟机，ip就是你配置的ip端口22，用户名密码均为vagrant 一般来说虚拟机启动之后就不需要管了。不过对于项目开发而言，你还需要做的一件事就是修改本地的hosts文件，让你请求的虚拟域名指向你的虚拟机ip。 六：vagrant常用命令 vagrant init # 初始化 vagrant up # 启动虚拟机 vagrant halt # 关闭虚拟机 vagrant reload # 重启虚拟机 vagrant ssh # SSH 至虚拟机 vagrant status # 查看虚拟机运行状态 vagrant destroy # 销毁当前虚拟机 vagrant box list # 查看本地box列表 vagrant box add # 添加box到列表 vagrant box remove # 从box列表移除","link":"/posts/2021.html"},{"title":"关于hexo-abbrlink链接undefined","text":"关于hexo-abbrlink hexo-abbrlink是一个hexo博客链接永久化的解决方案 支持使用不同的算法和进制对文章链接进行转换 算法 进制 生成链接 crc16 hex https://post.zz173.com/posts/3ab2.html crc16 dec https://post.zz173.com/posts/12345.html crc32 hex https://post.zz173.com/posts/9a8b6c4d.html crc32 dec https://post.zz173.com/posts/1690090958.html 安装 1npm install hexo-abbrlink --save 使用 打开config.yml，修改permalink中类似这样 1permalink: posts/:abbrlink.html 具体说明参照作者的github说明 项目地址在这里 可能出现的问题： 终于回到标题上来，有的同学说，这个配置完成之后，文章的链接都变成了undefined,新的文章没问题，老的文章就不行了。这个问题其实我们仔细想一下就能明白，我们首先要执行hexo clean 清楚掉以前生成的文章缓存，然后hexo g重新渲染就ok了。","link":"/posts/733.html"},{"title":"如何丧心病狂的使用python爬虫读小说","text":"写在前边 其实一直想入门python很久了，慕课网啊，菜鸟教程啊python的基础的知识被我翻了很多遍了，但是一直没有什么实践。刚好，这两天被别人一直安利一本小说《我可能修的是假仙》，还在连载中的，我等屌丝，打钱是不可能打钱的，只好先去网上找一下资源了，基本笔趣阁啊，什么的提供很多在线的资源给我们。好吧，就看这个就行了，可是看也看得不爽啊，，浏览器上下部分都被什么 美女荷官在线发牌，一夜不射提升半小时之类你懂的画面遮盖了，还经常误触，如果是在电脑上看，我们可以用ADBLOCK之类的广告插件屏蔽，可是手机浏览器貌似没有插件啊，那怎么办呢？我可是程序员啊，程序员怎么能向这种问题低头呢？ 解决方案 我们把在线网页上的章节名和章节内容都保存下来，造一个离线的版本不就没这个问题了么？ 那怎么保存呢，这就需要我们的主角出场了，铛铛铛，python scrapy爬虫框架 关于scrapy 向大家推荐 一个好玩的有趣的牛逼的网站scrapy中文教程 这个作者写的很有趣，摘录一下： 本scrapy文档，主要是给诸君介绍一下神马是scrapy，scrapy能干神马，提提大伙的学习热情！scrapy是一个网页爬虫框架，神马叫做爬虫，如果没听说过，那就：内事不知问度娘，外事不决问谷歌，百度或谷歌一下吧！……（这里的省略号代表scrapy很牛逼，基本神马都能爬，包括你喜欢的苍老师……这里就不翻译了） 爬虫代码 1234567891011121314151617181920212223242526272829import scrapyclass firstdemo(scrapy.Spider): # 爬虫名称 name = 'firstdemo' # 第一页 start_urls= ['http://m.biquku.la/16/16889/578155.html'] def parse(self,response): filename = '我可能修的是假仙.txt' # 章节名 title = response.css('.zhong::text').extract_first() # 章节内容 content = response.xpath(\"string(//article[@id='nr'])\").extract()[0].replace('\\n','').replace('\\xa0','') self.log(title) with open(filename,\"a+\",encoding='utf-8') as f: f.write(title) # 添加章节目录 f.write('\\n') # 添加换行（\\n）是为了让txt阅读器识别章节目录 f.write(content) f.write('\\n') f.close next_page = response.css('.nr_page a::attr(href)').extract()[2] if next_page is not None: next_page = 'http://m.biquku.la'+next_page yield scrapy.Request(next_page,callback=self.parse) else: self.log('已到最终章节') 没想到吧，代码就这么多，具体的教程可以参见向大家推荐的那个网站。最后我们执行scrapy crawl firstdemo就开始爬取了。 最后 最后？哪里有什么最后？都下载下来了，还不抓紧去看一下我们的战斗成果？ 当然还是要提醒诸位，学习为主，不要玩物丧志。","link":"/posts/51984.html"},{"title":"微信分享没图片的可能原因","text":"微信关键词屏蔽规则 问题描述 调用微信公众平台的分享接口,自己分享的只有自己能看见图片别人看不见（效果示例） 可能的原因 红包和领取这两个词不能同时出现,红包中间加空格,标点符号都不行“双11”关键字，分享内容的标题和内容不能包含此关键词 传进微信接口的参数title desc 里边不能包含微信屏蔽规则中的关键词 forexample : 12{title: \"双11购物狂欢节人品大爆发\", desc: \"@你，双11人品爆发这是没谁了！\"}","link":"/posts/2192.html"},{"title":"如何修改layer/layui中的confirm","text":"需求： 改成 背景： 这个confirm是layui中的layer弹出框，要想修改这个弹出框的内容岂不是要去修改源码？当我在源码里扒拉半天梳理好了逻辑之后，突然意识到，其实我本可以不必这么麻烦的，直接找到这个弹窗append元素进去就不就完了么？卧槽！所以我在代码里加了一行注释 浪费在这里的时间=2h 10分钟可以搞定的解决方案： 1234567var option = {1:'筛选项1',2:'筛选项2'};var optionString = '';for(let i in option) { optionString =optionString+'&lt;option value=\"'+i+'\"&gt;'+option[i]+\"&lt;/option&gt;\";}//一定要给加入的元素加入id，提交的时候取值方便$(\".layui-layer-content\").append(\"&lt;br/&gt;&lt;select id='reinvest_type'&gt;\"+optionString+\"&lt;/select&gt;\"); 结语 尽可能的不要犯蠢吧，有些问题并不像看上去那么难。当然修改源码也是可以的，而且还能做成一个通用方案，不过相当耗时。问题是没必要，整个项目就一处需要这样干，我们尽可能选择效率最高的那种方案。","link":"/posts/45548.html"},{"title":"慎用array_filter函数","text":"array_filter(PHP 4 &gt;= 4.0.6, PHP 5, PHP 7) array_filter — 用回调函数过滤数组中的单元 说明 array array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) 依次将 array 数组中的每个值传递到 callback 函数。如果 callback 函数返回 true，则 array 数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。 参数 array 要循环的数组 callback 使用的回调函数 如果没有提供 callback 函数， 将删除 array 中所有等值为 FALSE 的条目。更多信息见转换为布尔值。 flag 决定callback接收的参数形式: ARRAY_FILTER_USE_KEY - callback接受键名作为的唯一参数 ARRAY_FILTER_USE_BOTH - callback同时接受键名和键值 返回值 返回过滤后的数组。 array_filter其实是一个相当好用的函数，常用的场景包括，表单多条件筛选，可以直接用此函数过滤掉没有值的筛选项。 但是有一个问题，必须要重视： array_filter会过滤掉任何值等于FALSE的值，也就是说 0值，空字符串，null，都会被过滤当你的筛选项里有值等于0时，问题就会暴露出来，在我们的项目里，在调接口时做了过滤，没想到有一个默认的状态等于0的参数被我过滤掉了，就造成了线上数据的失常，也算是一个比较低级的错误了。此文谨记。","link":"/posts/43176.html"},{"title":"本地服务CURL请求本地另一个服务API返回超时/或无返回","text":"入职之后一直在忙，终于有时间整理一波最近踩到的坑。 起因： 项目是微服务架构，一个项目对外提供API，新的项目调用API获得数据。于是就在本地搭建了两个服务。配置了两个虚拟域名，指向两个项目，当然我本地是windows+nginx。意外就在这个时候发生了，我在新开发的项目中，调用另一个项目的API时，总是CURL超时，如果CURL不设置超时的话就会造成NGINX卡死。百思不得其解。 问题成因： 后来了解到原来PHP+NGINX在windows下是不支持并发的？参考文章在这里这个我并不敢十分的肯定，我只是觉得能理解这个东西，我们看nginx的配置文件的话，会更清楚一些，到底发生了什么： fastcgi_pass 都绑定了9000端口 所以两个服务就会有一个端口被占用，无法返回消息。 解决方案： 第一是要把服务绑定到其他没被占用的端口，比如9009然后切换到php-cgi所在的目录，再单独启动一个php-cgi进程，去监听这个个端口 1php-chi.exe -b 127.0.0.1:9009 好的，完美解决。","link":"/posts/49088.html"},{"title":"记录一个微信网页授权中不小心踩到的坑（Curl请求返回false）","text":"这个问题是file_get_contents不能获取https的内容引起的。这样的情况下，我们一般会采用curl拓展来模拟请求。 代码demo（当然这是错误的示范）：123456789function get_url_content($url){ $ch=curl_init(); curl_setopt($ch,CURLOPT_URL,$url); curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,false); curl_setopt($ch,CURLOPT_SSL_VERIFYHOST,false); curl_setopt($ch,CURLOPT_RETURNTRANSFER,1); $result=curl_exec($ch); return $result;} 但是这个代码中有些问题，假如我们想访问https的内容的话，我们必须开启这两项验证12CURLOPT_SSL_VERIFYPEERCURLOPT_SSL_VERIFYHOST 123456789function get_url_content($url){ $ch=curl_init(); curl_setopt($ch,CURLOPT_URL,$url); curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,true); curl_setopt($ch,CURLOPT_SSL_VERIFYHOST,true); curl_setopt($ch,CURLOPT_RETURNTRANSFER,1); $result=curl_exec($ch); return $result;} 但是在获取用户信息的时候,Curl请求总是返回false，检查参数，什么都没错，为什么会返回false呢，最后实在想不通。 so 看到了这篇文章 php curl返回false填坑记-curl调用微信创建自定义菜单返回false1$url = ' https://api.weixin.qq.com/cgi-bin/menu/create?access_token='.$accessToken; 回头去检查我的代码，哎哟卧槽，还真是。就像那篇文章的大哥说的那样 总结：使用curl来请求数据时curl的url地址中的任何地方不能有空格存在，不然会返回一个你琢磨不透的false","link":"/posts/40635.html"},{"title":"两个比较好用的mysql函数","text":"我们经常会面临要从数据库里**判断时间，取出特定日期的查询。但是数据库里储存的都是unix时间戳，处理起来并不是特别友好。幸而MYSQL提供了几个处理时间戳的函数，可以帮助我们在查询的时候，就将时间戳格式化。用法举例如下：1.FROM_UNIXTIME()函数 FROM_UNIXTIME(unix_timestamp,format) 参数unix_timestamp 时间戳 可以用数据库里的存储时间数据的字段 参数format 要转化的格式 比如“”%Y-%m-%d“” 这样格式化之后的时间就是 2017-11-30 可以有的形式： %M 月名字(January～December) %W 星期名字(Sunday～Saturday) %D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。） %Y 年, 数字, 4 位 %y 年, 数字, 2 位 %a 缩写的星期名字(Sun～Sat) %d 月份中的天数, 数字(00～31) %e 月份中的天数, 数字(0～31) %m 月, 数字(01～12) %c 月, 数字(1～12) %b 缩写的月份名字(Jan～Dec) %j 一年中的天数(001～366) %H 小时(00～23) %k 小时(0～23) %h 小时(01～12) %I 小时(01～12) %l 小时(1～12) %i 分钟, 数字(00～59) %r 时间,12 小时(hh:mm:ss [AP]M) %T 时间,24 小时(hh:mm:ss) %S 秒(00～59) %s 秒(00～59) %p AM或PM %w 一个星期中的天数(0=Sunday ～6=Saturday ） %U 星期(0～52), 这里星期天是星期的第一天 %u 星期(0～52), 这里星期一是星期的第一天 %% 一个文字% 使用举例：123456789SELECTusername,FROM_UNIXTIME(create_time, &quot;%Y-%m-%d&quot;) AS datFROM`wp_user`GROUP BY dat 这样就能查出每天有哪些用户注册了。按天分组，你可以将数据导出后进行其他操作。 2.UNIX_TIMESTAMP（） UNIX_TIMESTAMP(date) 其中date可以是一个DATE字符串，一个DATETIME字符串，一个TIMESTAMP或者一个当地时间的YYMMDD或YYYMMDD格式的数字 用这个函数可以帮助我们在时间戳中筛选出某些天的数据。 比如说：1234567891011SELECTusername,FROM_UNIXTIME(create_time, &quot;%Y-%m-%d&quot;) AS datFROM`wp_user`WHEREcreate_time &gt;=UNIX_TIMESTAMP(&apos;&apos;2017-11-29&apos;)ANDcreate_time &lt;UNIX_TIMESTAMP(&apos;&apos;2017-11-30&apos;)GROUP BY dat 这个查询可以让我们查出29号那一天的用户注册记录。 善用这两个MYSQL函数可以帮助我们提高处理数据的效率。","link":"/posts/43658.html"},{"title":"微信支付秘钥绝对路径问题","text":"如果你使用了微信的官方SDK，那我想其实你很容易发现这个问题 在微信官方PHPSDK中WxPay.Api.php这个文件中，微信支付秘钥这里的路径写的是相对路径 这样这样 点开路径之后我们看到的是这样这样： 然而我们在生产环境的时候，微信要求这个路径为绝对路径，所以我们需要对WxPay.Api.php文件的以下两行内容做修改，改成绝对路径。","link":"/posts/19527.html"},{"title":"用PHP自带函数对二维数组进行排序","text":"经常会面临这样的需求，虽然有时候我们可以在数据库查询的时候，直接对数据进行排序，但还是无法满足日益复杂的业务需求。 这里边会用到两个函数 一个是array_column()函数，这个函数是从二维数组中抽出一个键的值，作为一个新的数组返回。 另一个是array_multisort()函数，这个函数是一个排序函数，它会依照第一个参数数组的排序规则，依照第一个参数数组的值在第三个参数重的位置对第三个参数进行排序。 听不明白吧？听不明白就对了，还是直接看代码来的实在：123456789101112131415161718192021222324252627282930313233343536373839$orgin = array( array( 'id' =&gt; 5698, 'first_name' =&gt; 'Bill', 'last_name' =&gt; 'Gates', ), array( 'id' =&gt; 4767, 'first_name' =&gt; 'Steve', 'last_name' =&gt; 'Jobs', ), array( 'id' =&gt; 3809, 'first_name' =&gt; 'Mark', 'last_name' =&gt; 'Zuckerberg', )); $idArr = array_column($orgin, 'id');array_multisort($idArr,SORT_ASC,$orgin);var_dump($orgin);// 这个打印的结果是：array (size=3) 0 =&gt; array (size=3) 'id' =&gt; int 3809 'first_name' =&gt; string 'Mark' (length=4) 'last_name' =&gt; string 'Zuckerberg' (length=10) 1 =&gt; array (size=3) 'id' =&gt; int 4767 'first_name' =&gt; string 'Steve' (length=5) 'last_name' =&gt; string 'Jobs' (length=4) 2 =&gt; array (size=3) 'id' =&gt; int 5698 'first_name' =&gt; string 'Bill' (length=4) 'last_name' =&gt; string 'Gates' (length=5) 这样是不是就清楚的多了？","link":"/posts/20637.html"},{"title":"记一个微信支付-1错误JSAPI缺少参数app|get_brand_request:Fail","text":"最近公司要做一个H5小游戏里边涉及到微信公众号支付，中间摸爬滚打遇到了很多坑。记录一下，留待后人看。 我们来看一下这个方法 GetJsApiParameters 怎么样，看起来像不像输出了一个JSON字符串作为微信支付JSAPI的参数？ 但是如果你传了字符串进去，那不好意思，一准报错，我们必须在前端把这个json字符串对象化。但是你以为这就完了么？不存在的。 我们的前端有一个公共的方法，会把JSON字符串转为JSON对象，但是传进去给这个微信的callpay方法，它都会自动的变成字符串（当然这也可能和我们前端框架有关系），我们试了各种方案，最后发现，不管你的数据类型是什么，在微信的jsApiCall()这个方法中，都对数据进行一下JSON.parse是最妥当的。————————————————–分割线———————————————————– 单纯的我以为这就完了，然而并没有，再后来我们发现这样也依旧会偶尔出现唤不起微信支付的情况，所以后来我们是 这么干的，尽管看起来什么也没做，但这样就是好使。如果你也遇到了同样的问题，建议你也试试这种解决方案。","link":"/posts/18842.html"},{"title":"论好的代码习惯的养成/做一个优雅的coder","text":"1.先说一下以前被滴滴大佬教育的事情： 以前写代码的时候，因为只需要取特定的几个字段，所以经常这么写12345678//Request $request for example$parameters = $request-&gt;all();$data['name'] = $parameters['name'];$data['email'] = $parameters['email'];$data['tel'] = $parameters['tel'];$data['address'] = $parameters['address'];$data['birthday'] = $parameters['birthday'];$data['sex'] = $parameters['sex']; 后来，大佬说，事实上你可以这样写：1234567//Request $request $column = ['name','email','tel','address','sex','birthday'];$data = [];foreach ($column as $v) { $data[$v] = $request[$v];} emmmm，好像确实要精简一点哈。。。。 2.再说一下最近被老大@的事情 因为对字符串函数用的比较多，我下意识的会把数组解开处理，已经形成思维定式了，拿到东西优先转成自己最熟悉的那种形态，但实际上，完全没有这么麻烦，比如下边的代码： 其实完全可以这样：123//Request $request$search = $request-&gt;all();$data['query'] = http_build_query($search); 或者说，本来就应该这么写，有自带的函数可以完成这样的功能，我们就不要自己再造轮子了。（我是真的菜哈。。。）","link":"/posts/59946.html"}],"tags":[{"name":"Javascript","slug":"Javascript","link":"/tags/Javascript/"},{"name":"CI","slug":"CI","link":"/tags/CI/"},{"name":"Sublime text3","slug":"Sublime-text3","link":"/tags/Sublime-text3/"},{"name":"laydate","slug":"laydate","link":"/tags/laydate/"},{"name":"cmder","slug":"cmder","link":"/tags/cmder/"},{"name":"layui","slug":"layui","link":"/tags/layui/"},{"name":"layer","slug":"layer","link":"/tags/layer/"},{"name":"fun","slug":"fun","link":"/tags/fun/"},{"name":"vagrant","slug":"vagrant","link":"/tags/vagrant/"},{"name":"abbrlink","slug":"abbrlink","link":"/tags/abbrlink/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"微信","slug":"微信","link":"/tags/微信/"},{"name":"数组筛选","slug":"数组筛选","link":"/tags/数组筛选/"},{"name":"Curl","slug":"Curl","link":"/tags/Curl/"},{"name":"微信开发","slug":"微信开发","link":"/tags/微信开发/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"微信支付","slug":"微信支付","link":"/tags/微信支付/"},{"name":"数组排序","slug":"数组排序","link":"/tags/数组排序/"},{"name":"优雅","slug":"优雅","link":"/tags/优雅/"}],"categories":[{"name":"有点意思","slug":"有点意思","link":"/categories/有点意思/"},{"name":"爬坑日常","slug":"爬坑日常","link":"/categories/爬坑日常/"},{"name":"厚积薄发","slug":"厚积薄发","link":"/categories/厚积薄发/"}]}